{"version":3,"file":"static/js/124.6b0f6b10.chunk.js","mappings":"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","sources":["components/Button/Button.jsx","components/Loader/Loader.js","components/Table/DraggableColumnHeader.jsx","components/Table/DraggableCellComponent.jsx","components/Table/Table.jsx","hooks/useDroppableArea.js","hooks/useRevisions.js","hooks/useToast.js"],"sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableColumnHeader = ({ header, columns, table }) => {\r\n  const isFixed = header.column.id === \"selection\";\r\n  const isPinned = table\r\n    .getState()\r\n    .columnPinning.left.includes(header.column.id);\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const sortable = useSortable({\r\n    id: header.column.id,\r\n    disabled: header.column.id === \"selection\" || header.column.id === \"EIN\",\r\n  });\r\n\r\n  const { attributes, listeners, setNodeRef, transform, isDragging } = isFixed\r\n    ? {\r\n        attributes: {},\r\n        listeners: {},\r\n        setNodeRef: null,\r\n        transform: null,\r\n        isDragging: false,\r\n      }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: \"sticky\",\r\n    top: 0,\r\n    left: isFixed ? 0 : isPinned ? \"var(--pinned-left)\" : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: header.getSize(),\r\n    zIndex: isFixed ? 5 : isPinned ? 4 : 3,\r\n    cursor: isFixed ? \"default\" : \"move\",\r\n    backgroundColor: \"#f2f2f2\",\r\n  };\r\n\r\n  return (\r\n    <th\r\n      ref={setNodeRef}\r\n      style={style}\r\n      data-fixed={isFixed}\r\n      data-pinned={isPinned}\r\n      className={className}\r\n    >\r\n      <div\r\n        className=\"d-flex align-items-center header-content\"\r\n        {...(!isFixed ? { ...attributes, ...listeners } : {})}\r\n      >\r\n        <div\r\n          className=\"flex-grow-1\"\r\n          onClick={header.column.getToggleSortingHandler()}\r\n        >\r\n          {header.isPlaceholder\r\n            ? null\r\n            : flexRender(header.column.columnDef.header, header.getContext())}\r\n          {header.column.getIsSorted() === \"asc\" ? (\r\n            <span className=\"icon\">↑</span>\r\n          ) : header.column.getIsSorted() === \"desc\" ? (\r\n            <span className=\"icon\">↓</span>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      <div\r\n        {...{\r\n          onDoubleClick: () => header.column.resetSize(),\r\n          onMouseDown: header.getResizeHandler(),\r\n          onTouchStart: header.getResizeHandler(),\r\n          className: `Resizer ${\r\n            header.column.getIsResizing() ? \"isResizing\" : \"\"\r\n          }`,\r\n        }}\r\n      />\r\n    </th>\r\n  );\r\n};\r\n\r\nexport default DraggableColumnHeader;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableCell = ({ cell, columns, changedCells }) => {\r\n  const isFixed = cell.column.id === \"selection\";\r\n  const isPinned = cell.column.getIsPinned();\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const cellContent = flexRender(cell.column.columnDef.cell, cell.getContext());\r\n  // Extract only the column name (remove row index prefix like '0_')\r\n  const columnName =\r\n    cell.column.id.split(\"_\").slice(1).join(\"_\") || cell.column.id;\r\n  const isChanged = changedCells?.[columnName];\r\n  const sortable = useSortable({\r\n    id: cell.column.id,\r\n    disabled: isFixed,\r\n  });\r\n\r\n  const { setNodeRef, transform, isDragging } = isFixed\r\n    ? { setNodeRef: null, transform: null, isDragging: false }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: isFixed || isPinned ? \"sticky\" : \"relative\",\r\n    left: isFixed ? 0 : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: cell.column.getSize(),\r\n    zIndex: isFixed ? 2 : isDragging ? 1 : isPinned ? 2 : 0,\r\n  };\r\n\r\n  return (\r\n    <td\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={className}\r\n      title={isFixed ? \"\" : `${cell.getValue()}`}\r\n    >\r\n      {isFixed ? (\r\n        cellContent\r\n      ) : (\r\n        <div\r\n          className=\"cell-content\"\r\n          style={{\r\n            color: isChanged ? \"red\" : \"inherit\",\r\n            fontWeight: isChanged ? \"bold\" : \"normal\",\r\n          }}\r\n        >\r\n          {cellContent}\r\n          <style>\r\n            {`\r\n        .cell-content select {\r\n          color: ${isChanged ? \"red\" : \"inherit\"} !important;\r\n          font-weight: ${isChanged ? \"bold\" : \"normal\"} !important;\r\n        }\r\n      `}\r\n          </style>\r\n        </div>\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default DraggableCell;\r\n","import React, { useMemo, useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  getSortedRowModel,\r\n} from \"@tanstack/react-table\";\r\nimport {\r\n  DndContext,\r\n  KeyboardSensor,\r\n  MouseSensor,\r\n  TouchSensor,\r\n  closestCenter,\r\n  useSensor,\r\n  useSensors,\r\n} from \"@dnd-kit/core\";\r\nimport { restrictToHorizontalAxis } from \"@dnd-kit/modifiers\";\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  horizontalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./Table.css\";\r\nimport CustomButton from \"../Button/Button\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\nimport { handleExportExcel } from \"../../utils/helpers\";\r\nimport { getRowRange } from \"../../utils/helpers\";\r\nimport DraggableColumnHeader from \"./DraggableColumnHeader\";\r\nimport DraggableCell from \"./DraggableCellComponent\";\r\n\r\n// Add this utility  function to get the storage key based on the widget type\r\nconst getWidgetStorageKey = (widgetType) => {\r\n  console.log(\"Widget Type:\", widgetType);\r\n  if (!widgetType) {\r\n    console.warn(\"Widget type is missing, using default key\");\r\n    return \"tableColumnOrder_default\";\r\n  }\r\n  return `tableColumnOrder_${widgetType}`;\r\n};\r\n\r\nconst ReusableTable = ({\r\n  columns,\r\n  data,\r\n  editable = false,\r\n  meta,\r\n  widgetType,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [tableData, setTableData] = useState(data);\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  const [lastSelectedId, setLastSelectedId] = useState(null); // Track last clicked row\r\n  const tableRef = useRef(null);\r\n  const [isScrolled, setIsScrolled] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const handleScroll = (e) => {\r\n      setIsScrolled(e.target.scrollTop > 0);\r\n    };\r\n\r\n    const tableContainer = tableRef.current;\r\n    if (tableContainer) {\r\n      tableContainer.addEventListener(\"scroll\", handleScroll);\r\n    }\r\n\r\n    return () => {\r\n      if (tableContainer) {\r\n        tableContainer.removeEventListener(\"scroll\", handleScroll);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  if (widgetType !== \"Revision_FLoat_Widget\") {\r\n    var { updateTableData } = meta; // Need to work on this\r\n  }\r\n\r\n  // Modified columnOrder initialization\r\n  const [columnOrder, setColumnOrder] = useState(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    const storedOrder = localStorage.getItem(storageKey);\r\n\r\n    if (storedOrder) {\r\n      try {\r\n        const parsed = JSON.parse(storedOrder);\r\n        // Validate stored columns match current columns\r\n        const isValid = parsed.every(\r\n          (colId) =>\r\n            colId === \"selection\" ||\r\n            columns.some((col) => (col.id || col.accessorKey) === colId)\r\n        );\r\n        if (isValid) return parsed;\r\n      } catch (error) {\r\n        console.error(`Failed to parse column order for ${widgetType}:`, error);\r\n      }\r\n    }\r\n\r\n    // Default order if nothing in localStorage or invalid data\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  });\r\n\r\n  // Update localStorage with widget-specific key\r\n  useEffect(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.setItem(storageKey, JSON.stringify(columnOrder));\r\n  }, [columnOrder, widgetType]);\r\n\r\n  console.log(\"Column Order:\", columnOrder);\r\n\r\n  // Store default column order for reset functionality\r\n  const defaultColumnOrder = useMemo(() => {\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  }, [columns]);\r\n\r\n  // Modified reset columns handler\r\n  const handleResetColumns = () => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.removeItem(storageKey);\r\n    setColumnOrder(defaultColumnOrder);\r\n    // console.log(\"Reset columns clicked\", defaultColumnOrder);\r\n  };\r\n\r\n  const handleEditCell = (rowIndex, columnId, value) => {\r\n    const updatedData = tableData.map((row, index) =>\r\n      index === rowIndex ? { ...row, [columnId]: value } : row\r\n    );\r\n    console.log(\"[Table] Updated Table Data:\", updatedData);\r\n\r\n    // Call the meta function to update external data if needed\r\n    if (meta?.updateTableData) {\r\n      meta.updateTableData(updatedData);\r\n    }\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  // Initialize columnPinning based on column definitions\r\n  const initialColumnPinning = useMemo(() => {\r\n    const pinnedColumns = { left: [\"selection\", \"EIN \"] };\r\n    columns.forEach((column) => {\r\n      if (column.columnPinning) {\r\n        pinnedColumns.left.push(column.id || column.accessorKey);\r\n      }\r\n    });\r\n    return pinnedColumns;\r\n  }, [columns]);\r\n\r\n  // Enhance columns for editable functionality and add checkbox selection\r\n  const enhancedColumns = useMemo(() => {\r\n    const selectionColumn = {\r\n      id: \"selection\",\r\n      header: ({ table }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          ref={(el) => {\r\n            if (el) {\r\n              el.indeterminate = table.getIsSomeRowsSelected();\r\n            }\r\n          }}\r\n          checked={table.getIsAllRowsSelected()}\r\n          onChange={table.getToggleAllRowsSelectedHandler()}\r\n        />\r\n      ),\r\n      cell: ({ row }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          {...{\r\n            checked: row.getIsSelected(),\r\n            onChange: row.getToggleSelectedHandler(),\r\n          }}\r\n        />\r\n      ),\r\n    };\r\n\r\n    const baseColumns = editable\r\n      ? columns.map((column) => ({\r\n          ...column,\r\n          cell: column.editable\r\n            ? ({ row, getValue }) => (\r\n                <input\r\n                  className=\"input-cell\"\r\n                  value={getValue()}\r\n                  onChange={(e) =>\r\n                    handleEditCell(\r\n                      row.index,\r\n                      column.accessorKey,\r\n                      e.target.value\r\n                    )\r\n                  }\r\n                />\r\n              )\r\n            : column.cell,\r\n        }))\r\n      : columns;\r\n\r\n    return [selectionColumn, ...baseColumns];\r\n  }, [columns, editable]);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(MouseSensor, {\r\n      activationConstraint: {\r\n        distance: 8,\r\n      },\r\n    }),\r\n    useSensor(TouchSensor, {\r\n      activationConstraint: {\r\n        delay: 200,\r\n        tolerance: 5,\r\n      },\r\n    }),\r\n    useSensor(KeyboardSensor, {})\r\n  );\r\n\r\n  // Modified handleDragEnd to save to localStorage\r\n  const handleDragEnd = (event) => {\r\n    const { active, over } = event;\r\n\r\n    if (active && over && active.id !== over.id) {\r\n      if (active.id !== \"selection\" && active.id !== \"EIN\") {\r\n        setColumnOrder((prevOrder) => {\r\n          const oldIndex = prevOrder.indexOf(active.id);\r\n          const newIndex = prevOrder.indexOf(over.id);\r\n          const newOrder = arrayMove(prevOrder, oldIndex, newIndex);\r\n          return newOrder;\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const table = useReactTable({\r\n    data: tableData,\r\n    columns: enhancedColumns,\r\n    state: {\r\n      rowSelection,\r\n      columnOrder,\r\n      columnPinning: initialColumnPinning,\r\n    },\r\n    onRowSelectionChange: setRowSelection,\r\n    onColumnOrderChange: setColumnOrder,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    enableRowSelection: true,\r\n    defaultColumn: {\r\n      size: 165,\r\n      minSize: 50,\r\n      maxSize: 500,\r\n    },\r\n    columnResizeMode: \"onChange\",\r\n    meta: {\r\n      updateTableData, // Added this to the meta field to allow columns to update the table data\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Get selected row data using table.getSelectedRowModel()\r\n    const selectedRows = table\r\n      .getSelectedRowModel()\r\n      .flatRows.map((row) => row.original);\r\n    // console.log(\"Selected Rows (TanStack Table):\", selectedRows);\r\n    dispatch(setSelectedTableRows(selectedRows)); // Update Redux store\r\n  }, [rowSelection, dispatch]); // Update when rowSelection changes\r\n\r\n  const columnSizeVars = useMemo(() => {\r\n    const headers = table.getFlatHeaders();\r\n    const colSizes = {};\r\n    console.log(\"table.getTotalSize()\", table.getTotalSize());\r\n    for (let i = 0; i < headers.length; i++) {\r\n      const header = headers[i];\r\n      colSizes[`--header-${header.id}-size`] = header.getSize();\r\n      colSizes[`--col-${header.column.id}-size`] = header.column.getSize();\r\n    }\r\n    return colSizes;\r\n  }, [table.getState().columnSizingInfo, table.getState().columnSizing]);\r\n\r\n  const handleSelectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: true },\r\n    });\r\n  };\r\n\r\n  const handleDeselectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: false },\r\n    });\r\n  };\r\n\r\n  const handleExport = () => {\r\n    console.log(\"Export button clicked\");\r\n    console.log(\"Widget Type in handleExport:\", widgetType); // ADD THIS LINE\r\n    if (widgetType === \"Revision_FLoat_Widget\") {\r\n      console.log(\"Exporting for Revision_FLoat_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Where Used Details.xlsx\");\r\n    } else if (widgetType === \"Plant_Assignment_Widget\") {\r\n      console.log(\"Exporting for Plant_Assignment_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"EAN_Manufacturing.xlsx\");\r\n    } else if (widgetType === \"Bos_Attribute_Widget\") {\r\n      console.log(\"Exporting for Bos_Attribute_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Bos_Attribute_Widget.xlsx\");\r\n    } else {\r\n      console.log(\r\n        \"Exporting with default filename for widgetType:\",\r\n        widgetType\r\n      ); // ADD THIS LINE\r\n      handleExportExcel(data, \"table-data.xlsx\"); // Default case\r\n    }\r\n  };\r\n\r\n  const handleRowClick = (row, event) => {\r\n    const { rows, rowsById } = table.getRowModel();\r\n    if (event.shiftKey && lastSelectedId) {\r\n      try {\r\n        const rowsToToggle = getRowRange(rows, row.id, lastSelectedId);\r\n        const isLastSelected = rowsById[lastSelectedId].getIsSelected();\r\n        rowsToToggle.forEach((r) => r.toggleSelected(isLastSelected));\r\n      } catch (e) {\r\n        console.error(\"Multi-select with shift+click failed:\", e);\r\n      }\r\n    } else {\r\n      row.toggleSelected(!row.getIsSelected());\r\n    }\r\n    setLastSelectedId(row.id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"toolkit my-3\">\r\n        <div className=\"d-flex justify-content-end button-container\">\r\n          <div className=\"d-flex\">\r\n            <CustomButton\r\n              variant=\"outline-primary\"\r\n              size=\"lg\"\r\n              onClick={handleSelectAll}\r\n              className=\"m-2\"\r\n              text=\"Select All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-secondary\"\r\n              size=\"lg\"\r\n              onClick={handleDeselectAll}\r\n              className=\"m-2\"\r\n              text=\"Deselect  All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-success\"\r\n              size=\"lg\"\r\n              onClick={handleExport}\r\n              className=\"m-2 border-bottom-10px\"\r\n              text=\"Export to CSV \"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-warning\"\r\n              size=\"lg\"\r\n              onClick={handleResetColumns}\r\n              className=\"m-2\"\r\n              text=\"Reset Columns\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"table-info\">\r\n        <p>{tableData.length} Items</p>\r\n      </div>\r\n      <DndContext\r\n        sensors={sensors}\r\n        collisionDetection={closestCenter}\r\n        modifiers={[restrictToHorizontalAxis]}\r\n        onDragEnd={handleDragEnd}\r\n      >\r\n        <div\r\n          ref={tableRef}\r\n          className={`table-responsive ${isScrolled ? \"is-scrolled\" : \"\"}`}\r\n        >\r\n          <table\r\n            className=\"table custom-table table-hover\"\r\n            style={{\r\n              ...columnSizeVars,\r\n              width: table.getTotalSize(),\r\n            }}\r\n          >\r\n            <thead>\r\n              {table.getHeaderGroups().map((headerGroup) => (\r\n                <tr key={headerGroup.id}>\r\n                  <SortableContext\r\n                    items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                    strategy={horizontalListSortingStrategy}\r\n                  >\r\n                    {headerGroup.headers.map((header) => (\r\n                      <DraggableColumnHeader\r\n                        key={header.id}\r\n                        header={header}\r\n                        columns={columns}\r\n                        table={table}\r\n                      />\r\n                    ))}\r\n                  </SortableContext>\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n\r\n            <tbody>\r\n              {table.getRowModel().rows.length > 0 ? (\r\n                table.getRowModel().rows.map((row) => (\r\n                  <tr\r\n                    key={row.id}\r\n                    onClick={(event) => handleRowClick(row, event)}\r\n                    className={rowSelection[row.id] ? \"row-selected\" : \"\"}\r\n                  >\r\n                    <SortableContext\r\n                      items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                      strategy={horizontalListSortingStrategy}\r\n                    >\r\n                      {row.getVisibleCells().map((cell) => (\r\n                        <DraggableCell\r\n                          key={cell.id}\r\n                          cell={cell}\r\n                          columns={columns}\r\n                          changedCells={row.original.changedCells} // Pass changed cells info\r\n                        />\r\n                      ))}\r\n                    </SortableContext>\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td\r\n                    colSpan={table.getHeaderGroups()[0].headers.length}\r\n                    className=\"no-data p-2\"\r\n                  >\r\n                    No Table Data\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </DndContext>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReusableTable;\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setDroppedObjectData } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction, setLoading } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport useRevisions from \"./useRevisions\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst useDroppableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { fetchRevisionsAndParents } = useRevisions();\r\n  const dispatch = useDispatch();\r\n  // ✅ Use `useSelector` to get the latest values from Redux\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Fetch Revisions and Parents in parallel\r\n          const relativePath = objectDetailsResult.data.cardData.relativePath;\r\n          const [revisionParentData] = await Promise.all([\r\n            fetchRevisionsAndParents(\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              relativePath\r\n            ),\r\n          ]);\r\n          // Dispatch all updates together (batching updates)\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n              parentDetails: revisionParentData || [],\r\n            })\r\n          );\r\n          console.log(\"[fetchObjectDetails] ✅ Redux store updated.\");\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        console.log(\"[fetchObjectDetails] 🏁 Ensuring loading is reset.\");\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, fetchRevisionsAndParents, showErrorToast]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\"VPMReference\", \"Document\", \"Raw_Material\"];\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useDroppableArea;\r\n","import useToast from \"../hooks/useToast\";\r\n\r\nimport api from \"../utils/api\"; // Import axios instance\r\nimport { MSG_REPLACE_SUCCESS, MSG_REPLACE_ERROR } from \"../utils/toastMessages\";\r\n\r\nconst useRevisions = () => {\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  const fetchRevisionsAndParents = async (\r\n    objectId,\r\n    objectType,\r\n    relativePath\r\n  ) => {\r\n    if (!relativePath) {\r\n      console.error(\"[Fetch Revisions] ❌ Missing relative path.\");\r\n      return;\r\n    }\r\n\r\n    const parentURL = `/revFloat/getParents`;\r\n\r\n    try {\r\n      // Use the axios instance to make the POST request\r\n      const response = await api.post(parentURL, {\r\n        data: {\r\n          id: objectId,\r\n          type: objectType,\r\n          relativePath: relativePath,\r\n        },\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        const parentDetails = response.data;\r\n\r\n        // 🚀 Return data instead of dispatching\r\n        return parentDetails;\r\n      } else {\r\n        throw new Error(\r\n          `[Fetch Revisions] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Fetch Revisions] ❌ Error occurred:\", error);\r\n      return null; // Ensure it returns null on error\r\n    }\r\n  };\r\n\r\n  const replaceRevisions = async (selectedParents, droppedData, userEmail) => {\r\n    const parentURL = `/revFloat/floatRevisions`; // Use relative path for axios\r\n\r\n    try {\r\n      // Make the POST request to the replacement API\r\n      const response = await api.post(parentURL, {\r\n        SelectedParents: selectedParents,\r\n        DroppedData: droppedData,\r\n        userEmail: userEmail,\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        // Handle successful replacement\r\n        console.log(\"Replacement successful:\", response.data);\r\n        showSuccessToast(MSG_REPLACE_SUCCESS); // Show success toast\r\n        // You might want to update the Redux store or refetch data here\r\n        return { success: true };\r\n      } else {\r\n        throw new Error(\r\n          `[Replacement API] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during replacement:\", error);\r\n      showErrorToast(MSG_REPLACE_ERROR); // Show error toast\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  return { fetchRevisionsAndParents, replaceRevisions };\r\n};\r\n\r\nexport default useRevisions;\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\nexport default useToast;"],"names":["_ref","variant","size","type","disabled","onClick","className","title","text","imageSrc","props","_objectWithoutProperties","_excluded","_jsxs","Button","_objectSpread","children","_jsx","src","alt","style","width","height","marginRight","Loader","header","columns","table","isFixed","column","id","isPinned","getState","columnPinning","left","includes","sortable","useSortable","attributes","listeners","setNodeRef","transform","isDragging","opacity","position","top","CSS","Transform","toString","transition","getSize","zIndex","cursor","backgroundColor","ref","getToggleSortingHandler","isPlaceholder","flexRender","columnDef","getContext","getIsSorted","onDoubleClick","resetSize","onMouseDown","getResizeHandler","onTouchStart","concat","getIsResizing","cell","changedCells","getIsPinned","cellContent","columnName","split","slice","join","isChanged","getValue","color","fontWeight","getWidgetStorageKey","widgetType","console","log","warn","data","editable","meta","dispatch","useDispatch","tableData","setTableData","useState","rowSelection","setRowSelection","lastSelectedId","setLastSelectedId","tableRef","useRef","isScrolled","setIsScrolled","useEffect","handleScroll","e","target","scrollTop","tableContainer","current","addEventListener","removeEventListener","updateTableData","columnOrder","setColumnOrder","storageKey","storedOrder","localStorage","getItem","parsed","JSON","parse","every","colId","some","col","accessorKey","error","initialOrder","otherColumns","map","push","setItem","stringify","defaultColumnOrder","useMemo","initialColumnPinning","pinnedColumns","forEach","enhancedColumns","selectionColumn","_ref2","el","indeterminate","getIsSomeRowsSelected","checked","getIsAllRowsSelected","onChange","getToggleAllRowsSelectedHandler","_ref3","row","getIsSelected","getToggleSelectedHandler","_ref4","value","handleEditCell","rowIndex","columnId","updatedData","index","sensors","useSensors","useSensor","MouseSensor","activationConstraint","distance","TouchSensor","delay","tolerance","KeyboardSensor","useReactTable","state","onRowSelectionChange","onColumnOrderChange","getCoreRowModel","getSortedRowModel","enableRowSelection","defaultColumn","minSize","maxSize","columnResizeMode","selectedRows","getSelectedRowModel","flatRows","original","setSelectedTableRows","columnSizeVars","headers","getFlatHeaders","colSizes","getTotalSize","i","length","columnSizingInfo","columnSizing","_Fragment","CustomButton","handleSelectAll","handleDeselectAll","handleExport","handleExportExcel","handleResetColumns","removeItem","DndContext","collisionDetection","closestCenter","modifiers","restrictToHorizontalAxis","onDragEnd","event","active","over","prevOrder","oldIndex","indexOf","newIndex","arrayMove","getHeaderGroups","headerGroup","SortableContext","items","getVisibleLeafColumns","strategy","horizontalListSortingStrategy","DraggableColumnHeader","getRowModel","rows","handleRowClick","rowsById","shiftKey","rowsToToggle","getRowRange","isLastSelected","r","toggleSelected","getVisibleCells","DraggableCell","colSpan","useDroppableArea","showErrorToast","useToast","fetchRevisionsAndParents","useRevisions","isDropped","useSelector","droppedObject","loading","fetchObjectDetails","useCallback","async","objectDetailsResult","getDroppedObjectDetails","dataItems","success","_dataItems$","_dataItems$2","relativePath","cardData","revisionParentData","Promise","all","objectId","objectType","setDroppedObjectData","parentDetails","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","handleDrop","_dataItems$3","MSG_INVALID_OBJECT_TYPE","setIsDroppedAction","setTimeout","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","showSuccessToast","response","api","post","status","Error","replaceRevisions","selectedParents","droppedData","userEmail","SelectedParents","DroppedData","MSG_REPLACE_SUCCESS","MSG_REPLACE_ERROR","message","showToast","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","Bounce","otherOptions","toast","options","arguments","undefined","showInfoToast","showWarningToast"],"sourceRoot":""}