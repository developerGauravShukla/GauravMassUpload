{"version":3,"file":"static/js/634.547705c4.chunk.js","mappings":"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","sources":["components/List/List.jsx","components/Card/Card.jsx","components/DragAndDrop/DragAndDropStandAlone.jsx","components/Card/cardwithdraganddrop.jsx","components/Popup/Popup.jsx","components/SearchInput/SearchInput.jsx","hooks/useInterComSearch.js","services/api/PlantAssignment/userGroupService.js","services/api/PlantAssignment/searchCAService.js","hooks/usePlantAssignment.js","services/api/PlantAssignment/allPlantSevice.js","services/api/PlantAssignment/assignedPlantService.js","services/api/PlantAssignment/plantChildrenService.js","services/api/PlantAssignment/CADetailService.js","services/api/PlantAssignment/fetchCsrfService.js","services/api/PlantAssignment/saveTableDataService.js","services/api/refreshService.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport \"./List.css\";\r\nimport { makeDraggable } from \"../../utils/helpers\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst List = ({ data, isColumn, onDragStart, onDragEnd }) => {\r\n  const titleRef = useRef(null);\r\n  const initialDraggedData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData.initialDraggedData\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (titleRef.current && initialDraggedData) {\r\n      makeDraggable(\r\n        titleRef.current,\r\n        initialDraggedData,\r\n        onDragStart,\r\n        onDragEnd\r\n      );\r\n    }\r\n  }, [data, initialDraggedData, onDragStart, onDragEnd]);\r\n\r\n  if (!data) return null;\r\n\r\n  return (\r\n    <div className={`d-flex ${isColumn ? \"flex-column\" : \"flex-row\"}`}>\r\n      <h5\r\n        ref={titleRef}\r\n        className={`mb-1 text-start title ${!isColumn ? \"me-2\" : \"\"}`}\r\n      >\r\n        {data.title}\r\n      </h5>\r\n      <ul\r\n        className={`list-group d-flex flex-row flex-sm-row flex-wrap justify-content-between pb-3 pb-md-0 ${\r\n          !isColumn ? \"w-75\" : \"\"\r\n        }`}\r\n      >\r\n        <li\r\n          className={`list-group-item flex-grow-1 text-start mx-0 ps-0 pb-0 ${\r\n            !isColumn ? \"d-flex flex-row justify-content-around\" : \"\"\r\n          }`}\r\n          style={{ border: \"0\" }}\r\n        >\r\n          <p>\r\n            <b>Type:</b>{\" \"}\r\n            <span className=\"list-text\" title={data.type}>\r\n              {data.type}\r\n            </span>\r\n          </p>\r\n          <p>\r\n            <b>Owner:</b>{\" \"}\r\n            <span className=\"list-text\" title={data.owner}>\r\n              {data.owner}\r\n            </span>\r\n          </p>\r\n          {isColumn && (\r\n            <p>\r\n              <b>Maturity State:</b>{\" \"}\r\n              <span className=\"list-text\" title={data[\"Maturity State\"]}>\r\n                {data[\"Maturity State\"]}\r\n              </span>\r\n            </p>\r\n          )}\r\n        </li>\r\n        {isColumn && (\r\n          <li\r\n            className=\"list-group-item flex-grow-1 text-start mx-0 pt-0\"\r\n            style={{ border: \"0\", paddingLeft: \"0\" }}\r\n          >\r\n            <p>\r\n              <b>Dropped Revision :</b>{\" \"}\r\n              <span className=\"list-text\" title={data[\"Dropped Revision\"]}>\r\n                {data[\"Dropped Revision\"]}\r\n              </span>\r\n            </p>\r\n            <p>\r\n              <b>Latest Released Revision:</b>{\" \"}\r\n              <span\r\n                className=\"list-text\"\r\n                title={data[\"Latest Released Revision\"]}\r\n              >\r\n                {data[\"Latest Released Revision\"]}\r\n              </span>\r\n            </p>\r\n            <p>\r\n              <b>Collabspace:</b>{\" \"}\r\n              <span\r\n                className=\"list-text\"\r\n                title={data[\"Collaborative Space Title\"]}\r\n              >\r\n                {data[\"Collaborative Space Title\"]}\r\n              </span>\r\n            </p>\r\n          </li>\r\n        )}\r\n\r\n        <li\r\n          className={`list-group-item flex-grow-1 text-start mx-0 ${\r\n            !isColumn ? \"d-flex flex-row\" : \"\"\r\n          }`}\r\n          style={{ border: \"0\", paddingLeft: \"0\" }}\r\n        >\r\n          {data.type !== \"Document\" && (\r\n            <>\r\n              <p>\r\n                <b>CAD Format:</b>{\" \"}\r\n                <span className=\"list-text\" title={data[\"CAD Format\"]}>\r\n                  {data[\"CAD Format\"]}\r\n                </span>\r\n              </p>\r\n              <p>\r\n                <b>EIN:</b>{\" \"}\r\n                <span className=\"list-text\" title={data.EIN}>\r\n                  {data.EIN}\r\n                </span>\r\n              </p>\r\n            </>\r\n          )}\r\n        </li>\r\n\r\n        <div className=\"d-none d-md-flex align-items-stretch\">\r\n          <div className=\"vr\"></div>\r\n        </div>\r\n\r\n        {/* Horizontal divider after third li on small screens */}\r\n        <div className=\"d-flex d-md-none w-100\">\r\n          <hr className=\"w-100\" />\r\n        </div>\r\n\r\n        <li\r\n          className=\"list-group-item flex-grow-1 text-start mx-0\"\r\n          style={{ border: \"0\" }}\r\n        >\r\n          <p className=\"description-container\" title={data.Description}>\r\n            {data.Description}\r\n          </p>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { useState } from \"react\";\r\nimport \"./Card.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport { Image, Card, CardBody } from \"react-bootstrap\";\r\nimport List from \"../List/List\";\r\n\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import { faAngleUp } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst CardComponent = ({ data, onDragStart, onDragEnd }) => {\r\n  const [isColumn, setIsColumn] = useState(true);\r\n\r\n  const toggleFlexDirection = () => {\r\n    setIsColumn(!isColumn);\r\n  };\r\n\r\n  return (\r\n    <Card className=\"d-flex flex-row mt-4 border-0 \" style={{ width: \"100%\" }}>\r\n      <div className=\"pb-3 d-none d-md-block me-5 ms-4\">\r\n        <Card.Img\r\n          className={`${\r\n            !isColumn ? \"image-resize img-thumbnail\" : \"img-thumbnail\"\r\n          } `}\r\n          src={data.imageURL} // Use dynamic image URL from data\r\n          alt=\"Card image\"\r\n        />\r\n      </div>\r\n      <CardBody className={`${!isColumn ? \"p-0 layout-change\" : \"p-0\"} `}>\r\n        <List\r\n          data={data}\r\n          isColumn={isColumn}\r\n          onDragStart={onDragStart}\r\n          onDragEnd={onDragEnd}\r\n        />\r\n      </CardBody>\r\n      <button\r\n        className=\"me-2 p-0 btn btn-link accordion-toggle\"\r\n        onClick={toggleFlexDirection}\r\n      >\r\n        {/* <FontAwesomeIcon\r\n          icon={faAngleUp}\r\n          size=\"xs\"\r\n          style={{ color: \"#212121\" }}\r\n          className={`rotatable ${isColumn ? \"rotated\" : \"\"}`}\r\n        /> */}\r\n\r\n        <Image\r\n          src=\"https://khanfarzan17.github.io/tedting-revision-float/images/arrow.png\"\r\n          alt=\"downArrow\"\r\n          className={`rotatable ${isColumn ? \"rotated\" : \"\"}`}\r\n        />\r\n      </button>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CardComponent;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropStandAlone = () => {\r\n  const { initializeDroppableArea } = useDroppableArea();\r\n  const hasInitializedDroppable = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (!hasInitializedDroppable.current) {\r\n      // console.log(\"[DragAndDrop] 🔄 Initializing droppable area...\");\r\n      initializeDroppableArea();\r\n      hasInitializedDroppable.current = true; // ✅ Prevent multiple calls\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <> \r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropStandAlone;\r\n","import React, { useState } from \"react\";\r\nimport DragAndDropStandAlone from \"../DragAndDrop/DragAndDropStandAlone\";\r\nimport CardComponent from \"./Card\";\r\n\r\nconst CardWithDragAndDrop = ({ data }) => {\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const handleDragStart = () => {\r\n    // console.log(\"handleDragStart called\"); \r\n    setIsDragging(true);\r\n  };\r\n\r\n  const handleDragEnd = () => {\r\n    // console.log(\"handleDragEnd called\"); \r\n    // console.log(\"Before setIsDragging(false) - isDragging:\", isDragging); \r\n    setIsDragging(false);\r\n    // console.log(\"After setIsDragging(false) - isDragging:\", isDragging);\r\n  };\r\n  return (\r\n    <div className={`card-with-drag-and-drop ${isDragging ? \"dragging\" : \"\"}`}>\r\n      <DragAndDropStandAlone />\r\n      <CardComponent\r\n        data={data}\r\n        onDragStart={handleDragStart}\r\n        onDragEnd={handleDragEnd}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardWithDragAndDrop;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport \"./SearchInput.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMagnifyingGlass } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SearchInput = ({ onSearch, disabled }) => {\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const handleInputChange = (event) => {\r\n    const newSearchText = event.target.value;\r\n    setSearchText(newSearchText);\r\n  };\r\n\r\n  const handleInputKeyPress = (event) => {\r\n    if (event.key === \"Enter\" && searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    setSearchText(\"\");\r\n    inputRef.current.focus(); // Keep focus on the input after clearing\r\n  };\r\n  const handleSearchIconClick = () => {\r\n    if (searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-content-container d-flex align-items-center\">\r\n      <FontAwesomeIcon\r\n        icon={faMagnifyingGlass}\r\n        onClick={handleSearchIconClick}\r\n        className=\"search-icon\"\r\n      />\r\n\r\n      <span className=\"ms-4 drag-and-drop-text flex-grow-1\">\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            ref={inputRef}\r\n            value={searchText}\r\n            onChange={handleInputChange}\r\n            onKeyDown={handleInputKeyPress}\r\n            placeholder=\"Search...\"\r\n            disabled={disabled}\r\n          />\r\n          {searchText && (\r\n            <Button\r\n              variant=\"btn-link\"\r\n              onClick={handleClearClick}\r\n              className=\"clear-button\"\r\n            >\r\n              ✖\r\n            </Button>\r\n          )}\r\n        </InputGroup>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { loadInterCom } from \"../utils/helpers\";\r\n\r\nconst useInterComSearch = () => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [InterCom, setInterCom] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        // console.log(\"[useInterComSearch] Loading InterCom module\");\r\n        const interComInstance = await loadInterCom();\r\n        setInterCom(interComInstance);\r\n      } catch (error) {\r\n        console.error(\r\n          \"[useInterComSearch] Error initializing InterCom:\",\r\n          error\r\n        );\r\n      }\r\n    };\r\n    loadData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (socket) {\r\n        socket.disconnect();\r\n        // console.log(\"[useInterComSearch] Socket disconnected\");\r\n      }\r\n    };\r\n  }, [socket]);\r\n\r\n  const performSearch = useCallback(\r\n    (searchText, searchOpts, onObjectsSelected) => {\r\n      // Check if InterCom is loaded\r\n      if (!InterCom) {\r\n        console.warn(\"[useInterComSearch] InterCom is not loaded yet.\");\r\n        return;\r\n      }\r\n\r\n      const socketName =\r\n        \"socket\" + new Date().toISOString().replace(/[-:]/g, \"\");\r\n      const newSocket = new InterCom.Socket(socketName, {\r\n        dispatchRetryInternal: 0,\r\n      });\r\n      newSocket.subscribeServer(\"SearchComServer\");\r\n      setSocket(newSocket);\r\n\r\n      console.log(\r\n        \"[useInterComSearch] performSearch called with:\",\r\n        searchText,\r\n        searchOpts\r\n      );\r\n\r\n      const widgetId = window.widget?.id;\r\n      // console.log(\"[useInterComSearch] widget id:\", widgetId);\r\n\r\n      const finalSearchOpts = {\r\n        ...searchOpts,\r\n        widget_id: widgetId,\r\n        app_socket_id: socketName,\r\n        default_search_criteria: searchText,\r\n      };\r\n\r\n      // Register the search context (if needed)\r\n      console.log(\r\n        \"[useInterComSearch] Dispatching RegisterContext event with:\",\r\n        finalSearchOpts\r\n      );\r\n      newSocket.dispatchEvent(\"RegisterContext\", finalSearchOpts);\r\n\r\n      // Dispatch the search event\r\n      // console.log(\r\n      //   \"[useInterComSearch] Dispatching InContextSearch event with:\",\r\n      //   finalSearchOpts\r\n      // );\r\n      newSocket.dispatchEvent(\"InContextSearch\", finalSearchOpts);\r\n\r\n      // Add a listener for search results\r\n      const handleSearchResults = (data) => {\r\n        console.log(\"[useInterComSearch] Search results received:\", data);\r\n        if (onObjectsSelected) {\r\n          onObjectsSelected(data);\r\n        }\r\n      };\r\n\r\n      console.log(\r\n        \"[useInterComSearch] Adding listener for Selected_Objects_search\"\r\n      );\r\n      newSocket.addListener(\"Selected_Objects_search\", handleSearchResults);\r\n    },\r\n    [InterCom]\r\n  );\r\n\r\n  return {\r\n    performSearch,\r\n  };\r\n};\r\n\r\nexport default useInterComSearch;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/sharing/getSharing`;\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const SearchCA = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  try {\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/search?$searchStr=name:${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const caID = searchResponse.changeAction[0]?.identifier;\r\n\r\n    console.log(\"Response From 1st Call\", caID);\r\n\r\n    if (caID) {\r\n      // 2nd API call to fetch Change Action details\r\n      const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${caID}?$fields=proposedChanges,flowDown`;\r\n      const CAresponse = await fetchData(CAUrl);\r\n\r\n      console.log(\"Response From 2nd Call\", CAresponse);\r\n\r\n      if (CAresponse) {\r\n        // Use for...of for async handling in loop\r\n        for (const item of CAresponse.isFlowDownOf || []) {\r\n          if (item.type === \"Change Action\") {\r\n            const parentCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}?$fields=proposedChanges,flowDown`;\r\n\r\n            try {\r\n              // 3rd API call to fetch Parent Change Action details\r\n              const parentCAResponse = await fetchData(parentCAUrl);\r\n\r\n              console.log(\"Response From 3rd Call\", parentCAResponse);\r\n\r\n              if (parentCAResponse) {\r\n                CADetails.CAAtt.push({\r\n                  CATitle: parentCAResponse.title,\r\n                  CAState: parentCAResponse.state,\r\n                });\r\n              }\r\n            } catch (error) {\r\n              console.error(\"Error fetching parent CA data:\", error);\r\n            }\r\n          }\r\n        }\r\n\r\n        CADetails[\"MCOState\"] = CAresponse.state;\r\n        CADetails[\"MCOTitle\"] = CAresponse.title;\r\n      }\r\n    }\r\n\r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\n\r\nimport {\r\n  setCAName,\r\n  setHeaders,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nconst usePlantAssignment = () => {\r\n  const { showErrorToast } = useToast();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // HERE IS THE iSSUE THAT THIS FUNCTION IS ALWAYS CALLED .\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  // const securityContext1 = initWidget.getValue(\"Credentials\");\r\n  // console.log(\"Srcurity Context in usePlantAssignment:\", securityContext1);\r\n\r\n  const handlePlantAssignment = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true));\r\n      const headers = await fetchCsrfToken();\r\n      // Step 1: Call Initial Service\r\n      if (headers) {\r\n        console.log(\"[UsePlantAssignment] Headers are\", headers);\r\n        const userGroupCollab = await getUserGroupCollab(\r\n          headers,\r\n          objectId,\r\n          email\r\n        );\r\n        console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n\r\n        console.log(\r\n          \"[Use Plant Assignment] All CollabSpaces:\",\r\n          allCollabSpaces\r\n        );\r\n\r\n        // Step 3: Pass Combined Data to Additional Service\r\n        if (allCollabSpaces) {\r\n          const allPlants = await getAllPlants(\r\n            allCollabSpaces,\r\n            headers,\r\n            objectId\r\n          );\r\n          console.log(\"[Use Plant Assignment] All Plants are:\", allPlants);\r\n\r\n          if (allPlants) {\r\n            const plants = await fetchAssignedPlants(\r\n              allPlants,\r\n              headers,\r\n              objectId\r\n            );\r\n\r\n            console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n            // to dispatch the plants\r\n            if (plants.success) {\r\n              dispatch(setPlantObjectData(plants.data.plantData));\r\n              dispatch(setHeaders(headers));\r\n            } else {\r\n              console.error(\"Failed to fetch plant data\");\r\n            }\r\n          } else {\r\n            console.warn(\"[Use All Plants] There are no Plants\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use All Plants] There are no CollabSpace\");\r\n        }\r\n\r\n        // Step 4: Call Remaining Independent Services\r\n        let getProductChildren = {};\r\n        console.log(\"Type Before:\", type);\r\n        if (type === \"Raw_Material\") {\r\n          getProductChildren = {\r\n            success: true,\r\n            data: [],\r\n          };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          ); // type we need here\r\n        }\r\n        console.log(\"Type After:\", type);\r\n        console.log(\"[Use All Plants] Product Childrens\", getProductChildren);\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use All Plants] Get CA Details\", getCaDetails);\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n        }\r\n\r\n        // Step 5: Dispatch Results to Redux\r\n\r\n        // hERE WE CAN ADD TOAST\r\n        console.log(\"[Plant Assignment] All Services Executed Successfully\");\r\n\r\n        return;\r\n      } else {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      dispatch(setParentDetailsLoading(false));\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // End loading at the top level\r\n    }\r\n  };\r\n\r\n  return { handlePlantAssignment };\r\n};\r\n\r\nexport default usePlantAssignment;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId // ProductId\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes.member;\r\n\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return SearchCA(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchProductChildren = async (headers, objectId, type) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  let urlObjWAF =\r\n    `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/`;\r\n  urlObjWAF += objectId;\r\n  urlObjWAF += \"/expand\";\r\n  let body = {\r\n    expandDepth: 1,\r\n    type_filter_bo: [\"VPMReference\"],\r\n    type_filter_rel: [\"VPMInstance\"],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[SearchCAService] ProductId is:\", objectId);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = (url, Method, classifyBody) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: Method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(classifyBody),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const response = await fetchData(urlObjWAF, \"POST\", body);\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n    const { member } = response;\r\n\r\n    if (member) {\r\n      let childs = response.member\r\n        .filter(\r\n          (member) =>\r\n            (member.type === \"VPMReference\" ||\r\n              member.type === \"Raw_Material\") &&\r\n            member.id !== objectId\r\n        )\r\n        .map((member) => ({\r\n          id: member.id,\r\n          type: member.type,\r\n          name: member.title,\r\n          state: member.state,\r\n        }));\r\n\r\n      // If there are child items, we need to fetch classification data\r\n      if (childs.length > 0) {\r\n        // Use Promise.all to handle multiple async operations\r\n        await Promise.all(\r\n          childs.map(async (child) => {\r\n            if (child.state.toLowerCase() === \"released\") {\r\n              let classesurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${child.id}?$mask=dslib:ClassificationAttributesMask`;\r\n              const classResponse = await fetchData(classesurl, \"GET\", \"\");\r\n              console.log(\"classResponse->\", classResponse);\r\n\r\n              const classIds = classResponse.member.flatMap((member) => {\r\n                if (member.ClassificationAttributes?.member) {\r\n                  return member.ClassificationAttributes.member.map(\r\n                    (classification) => classification.ClassID\r\n                  );\r\n                }\r\n                return [];\r\n              });\r\n              child.classes = classIds; // Adding classes of released child\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: childs,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error while Fetching\", error);\r\n    return { success: false, data: [], error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  const URLCADetails =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/setPreferences`;\r\n\r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/getEcosystem`;\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n\r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n\r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      if (response2.objectsByPatterns.caproposedwhere_from) {\r\n        await Promise.all(\r\n          response2.objectsByPatterns.caproposedwhere_from.map(async (itm) => {\r\n            const status = itm[\"ds6w:status\"].slice(14);\r\n\r\n            if (status !== \"Complete\") {\r\n              let url3 = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,flowDown`;\r\n\r\n              const response3 = await new Promise((resolve, reject) => {\r\n                WAFData.authenticatedRequest(url3, {\r\n                  method: \"GET\",\r\n                  headers,\r\n                  type: \"json\",\r\n                  onComplete: resolve,\r\n                  onFailure: reject,\r\n                });\r\n              });\r\n\r\n              if (Array.isArray(response3.proposedChanges)) {\r\n                response3.proposedChanges.forEach((proposedChange) => {\r\n                  proposedChangesArray.push({\r\n                    identifier: proposedChange.where.identifier,\r\n                    action: proposedChange.whats[0].what,\r\n                  });\r\n                });\r\n              }\r\n\r\n              if (state.toLowerCase() === \"released\") {\r\n                resObejct = proposedChangesArray.some(\r\n                  (proposedChange) =>\r\n                    proposedChange.identifier === objectID &&\r\n                    proposedChange.action === \"Modify\"\r\n                );\r\n              } else {\r\n                resObejct = true;\r\n              }\r\n            }\r\n          })\r\n        );\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n\r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n\r\n    throw error;\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","import axios from \"axios\";\r\nimport { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const fetchData = async (\r\n      url,\r\n      body = null,\r\n      method = \"GET\"\r\n      // headers = {}\r\n    ) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Method is:\");\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n      try {\r\n        const response = await axios({\r\n          url,\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: body, // Include body only if provided\r\n        });\r\n\r\n        console.log(\"Response received:\", response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        console.error(\"Request failed:\", error);\r\n        throw error; // Propagate the error to the caller\r\n      }\r\n    };\r\n\r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        return !change;\r\n      }\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n\r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n\r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n\r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n\r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n\r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n\r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n\r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        classifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n\r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n\r\n      const patchUrl = `https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(patchUrl, updateBody, \"PATCH\");\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n\r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n        classifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        declassifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n\r\n    console.log(\"All classification API calls completed successfully.\");\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};\r\n","export const refreshWidgetData = async (dataItems, handleDrop) => {\r\n  console.log(\"[refreshWidgetData] called with dataItems:\", dataItems);\r\n  if (!dataItems || dataItems.length === 0) {\r\n    console.warn(\"[Refresh] No dropped data available to refresh.\");\r\n    return;\r\n  }\r\n  try {\r\n    if (typeof handleDrop !== \"function\") {\r\n      throw new Error(\"[Refresh] handleDrop is not a function.\");\r\n    }\r\n    await handleDrop(dataItems);\r\n  } catch (error) {\r\n    console.error(\"[Refresh] Error during handleDrop execution:\", error);\r\n  }\r\n};\r\n"],"names":["_ref","data","isColumn","onDragStart","onDragEnd","titleRef","useRef","initialDraggedData","useSelector","state","droppedObject","droppedObjectData","useEffect","current","makeDraggable","_jsxs","className","concat","children","_jsx","ref","title","style","border","type","owner","paddingLeft","_Fragment","EIN","Description","setIsColumn","useState","Card","width","Img","src","imageURL","alt","CardBody","List","onClick","toggleFlexDirection","Image","DragAndDropStandAlone","initializeDroppableArea","useDroppableArea","hasInitializedDroppable","height","isDragging","setIsDragging","CardComponent","handleDragStart","handleDragEnd","forwardRef","columns","addedItem","CAName","showWarningToast","useToast","rowSelection","setRowSelection","addPlant","selectedItems","table","getSelectedRowModel","rows","map","item","original","length","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","useMemo","id","cell","_ref2","row","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","getRowModel","forEach","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","column","columnDef","getContext","accessorKey","onSearch","disabled","searchText","setSearchText","inputRef","FontAwesomeIcon","icon","faMagnifyingGlass","handleSearchIconClick","trim","InputGroup","Form","Control","value","event","newSearchText","target","onKeyDown","key","placeholder","Button","variant","handleClearClick","focus","useInterComSearch","socket","setSocket","InterCom","setInterCom","async","interComInstance","loadInterCom","error","console","loadData","disconnect","performSearch","useCallback","searchOpts","onObjectsSelected","_window$widget","warn","socketName","Date","toISOString","replace","newSocket","Socket","dispatchRetryInternal","subscribeServer","log","widgetId","window","widget","finalSearchOpts","_objectSpread","widget_id","app_socket_id","default_search_criteria","dispatchEvent","addListener","SearchCA","flowDownCA","headers","CADetails","CAAtt","ENOVIA_BASE_URL","process","_searchResponse$chang","WAFData","loadWAFData","fetchData","Promise","resolve","reject","authenticatedRequest","url","method","onComplete","response","onFailure","urlObjWAF","caID","changeAction","identifier","CAUrl","CAresponse","isFlowDownOf","parentCAUrl","parentCAResponse","push","CATitle","CAState","usePlantAssignment","showErrorToast","dispatch","useDispatch","email","getValue","handlePlantAssignment","collabSpace","objectId","setParentDetailsLoading","fetchCsrfToken","userGroupCollab","JSON","stringify","objectID","userGroup","userGroupBody","groups","results","result","sharings","userGroups","group","access","uri","userGroupID","grpUrl","grpresponse","filter","members","includes","getUserGroupCollab","allCollabSpaces","allPlants","UserGroupClasses","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","libraryId","member","find","libraryDataURL","classResponse","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","plant","some","userClass","all","getAllPlants","plants","initialAssignedClasses","uniqueInAllclasses","ClassExtensions","ClassificationAttributes","classItem","parentClass","ClassID","PlantName","obj","promiseArray","Attributes","eachAttribute","name","then","flowDownCADetails","MCOTitle","MCOState","CA","slice","allClass","assigned","success","plantData","initialAssignedPlants","uniquePlants","fetchAssignedPlants","setPlantObjectData","setHeaders","getProductChildren","body","expandDepth","type_filter_bo","type_filter_rel","Method","classifyBody","childs","child","toLowerCase","classesurl","classIds","flatMap","_member$Classificatio","classification","classes","fetchProductChildren","setProductChildren","getCaDetails","resObejct","proposedChangesArray","URLCADetails","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","label","lang","ghostMode","url2","bd","responseMode","ids","status","response2","objectsByPatterns","caproposedwhere_from","itm","url3","response3","Array","isArray","proposedChanges","proposedChange","where","action","whats","what","fetchCADetails","setCAName","setProposedChanges","MSG_FETCH_CSRF_HEADERS_FAILED","securityContext1","csrfURL","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue","saveData","updatedItems","classesToBeClassified","productId","AllClasses","productChilds","rowstoDelete","finalArray","fetchOOTBData","arguments","undefined","axios","NotPropagableChilds","prodChild","change","ErrorObj","MBOMValue","prodchilds","notPropagableChild","childId","childName","Type","Finalmessage","message","every","childTitles","join","newClasses","errorItem","updateBody","MBOMName","propagateClasses","classifyUrl","classifybody","mode","classifyResponse","Object","keys","_response$member$","nextApiUrl","cestamp","patchUrl","childclassifyResponse","declassifyUrl","declassifyResponse","refreshWidgetData","dataItems","handleDrop","Error"],"sourceRoot":""}