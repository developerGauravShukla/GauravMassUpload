{"version":3,"file":"static/js/702.af9e2212.chunk.js","mappings":"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","sources":["components/Modal/customModal.jsx","components/FileUploader/FileUploader.jsx","pages/mass-upload/validateFile.js","components/Select/customSelect.jsx","components/Alert/ReusableAlert.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Modals/ConfirmationModal.jsx","components/bootsrap-table/Table.jsx","pages/mass-upload/mappedList.jsx","components/Modals/ColumnMappingModal.jsx","components/Modals/TableModel.jsx","pages/mass-upload/massUploadDataHelper.js","hooks/Mass-Upload/useMassUpload.js","hooks/Mass-Upload/useMassUploadDocument.js","pages/mass-upload/massUpload.jsx","utils/getUserDetails.js","utils/downloadTemplate.js","massuUploadIndex.js","services/api/PlantAssignment/fetchCsrfService.js"],"sourcesContent":["import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React, { useState, forwardRef, useImperativeHandle } from \"react\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport \"./FileUploader.css\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst FileUpload = forwardRef(\r\n  (\r\n    {\r\n      fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"XLSX\", \"CSV\"],\r\n      multiple = true,\r\n      onUpload,\r\n      onReset,\r\n      disabled = false,\r\n      message = \"Drag & Drop your files here or Click to browse\",\r\n    },\r\n    ref\r\n  ) => {\r\n    const [files, setFiles] = useState([]);\r\n    const { showErrorToast } = useToast();\r\n\r\n    // Expose handleClearFiles to parent through ref\r\n    useImperativeHandle(ref, () => ({\r\n      handleClearFiles: (skipSuccessToast = false) => {\r\n        setFiles([]);\r\n        if (onUpload) {\r\n          onUpload([]);\r\n        }\r\n        if (onReset) {\r\n          onReset(skipSuccessToast); // Pass skipSuccessToast parameter\r\n        }\r\n      },\r\n    }));\r\n\r\n    const handleChange = (selectedFiles) => {\r\n      const fileArray = multiple ? [...selectedFiles] : [selectedFiles];\r\n      setFiles(fileArray);\r\n\r\n      // Callback function to send files to parent component\r\n      if (onUpload) {\r\n        onUpload(fileArray);\r\n      }\r\n    };\r\n\r\n    const handleClearFile = () => {\r\n      ref.current.handleClearFiles(false); // Pass false to show success toast\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={`file-upload-container ${disabled ? \"disabled\" : \"\"}`}\r\n        // onDragOver={handleDragOver}\r\n      >\r\n        <h2>\r\n          {disabled ? \"Please select an operation first\" : \"Drag & Drop Files\"}\r\n        </h2>\r\n        <div className=\"upload-area\">\r\n          <FileUploader\r\n            multiple={multiple}\r\n            handleChange={handleChange}\r\n            name=\"file\"\r\n            types={fileTypes}\r\n            disabled={disabled}\r\n            hoverTitle={disabled ? \"\" : \"Drop here\"}\r\n          />\r\n          <div className=\"file-list\">\r\n            {files.length > 0 ? (\r\n              files.map((file, index) => (\r\n                <div\r\n                  className=\"mb-4\"\r\n                  key={index}\r\n                  style={{ display: \"flex\", alignItems: \"center\" }}\r\n                >\r\n                  <p className=\"me-2 mb-0\">📁 {file.name}</p>\r\n                  <button\r\n                    onClick={handleClearFile}\r\n                    style={{\r\n                      background: \"none\",\r\n                      border: \"none\",\r\n                      cursor: disabled ? \"not-allowed\" : \"pointer\",\r\n                      color: \"red\",\r\n                      opacity: disabled ? 0.5 : 1,\r\n                    }}\r\n                    disabled={disabled}\r\n                  >\r\n                    X\r\n                  </button>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>{message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default FileUpload;\r\n","import * as XLSX from \"xlsx\";\r\nimport config from \"./config.json\";\r\n\r\nconst processDataInChunks = (data, chunkSize = 1000) => {\r\n  const chunks = [];\r\n  for (let i = 0; i < data.length; i += chunkSize) {\r\n    chunks.push(data.slice(i, i + chunkSize));\r\n  }\r\n  return chunks;\r\n};\r\n\r\nconst validateFile = (file, collabSpaceTitles, selectedOperation) => {\r\n  return new Promise((resolve, reject) => {\r\n    console.log(\"🔍 Starting template validation...\");\r\n    console.log({\r\n      operation: selectedOperation,\r\n      fileName: file.name,\r\n    });\r\n\r\n    const operationNames = {\r\n      1: \"Physical Product\",\r\n      2: \"Physical Product Structure\",\r\n      3: \"Document\",\r\n      4: \"Physical Product-Document\",\r\n    };\r\n\r\n    const matchedOperation = operationNames[selectedOperation];\r\n    const expectedHeaders =\r\n      config.MassUpload[matchedOperation]?.fileHeaders || [];\r\n    const mandatoryAttributes =\r\n      config.MassUpload[matchedOperation]?.mandatoryAttributes || [];\r\n\r\n    if (!selectedOperation) {\r\n      reject({\r\n        errors: [\"Please select an operation first.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!Array.isArray(collabSpaceTitles)) {\r\n      console.error(\"❌ Invalid Collaborative Space list\");\r\n      reject({\r\n        errors: [\"Internal error: Invalid Collaborative Space list.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsBinaryString(file);\r\n\r\n    reader.onload = async (e) => {\r\n      const workbook = XLSX.read(e.target.result, {\r\n        type: \"binary\",\r\n        dense: true,\r\n        cellDates: true,\r\n        cellNF: false,\r\n        cellText: false,\r\n      });\r\n      const sheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[sheetName];\r\n      const uploadedHeaders =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n      // Template header validation\r\n      const headerMismatch = !expectedHeaders.every((header) =>\r\n        uploadedHeaders.includes(header)\r\n      );\r\n\r\n      if (headerMismatch) {\r\n        console.error(\"❌ Template mismatch detected!\");\r\n        reject({\r\n          isTemplateMismatch: true,\r\n          errors: [\r\n            \"The template uploaded does not match the selected operation.\",\r\n          ],\r\n          headers: uploadedHeaders,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const headers =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n      if (!headers || headers.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file has no content or is empty.\"],\r\n          headers: [],\r\n        });\r\n        return;\r\n      }\r\n\r\n      const allSheetData = XLSX.utils.sheet_to_json(worksheet, { defval: \"\" });\r\n\r\n      if (allSheetData.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file contains headers but no data rows.\"],\r\n          headers,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const chunks = processDataInChunks(allSheetData, 1000);\r\n      const validationErrors = [];\r\n      const invalidPrefixes = [\"MMI-\", \"RS-\", \"DAN-\", \"RSC-\", \"TF-\", \"ROXA-\"];\r\n\r\n      // Error counters\r\n      let errorStats = {\r\n        mandatory: 0,\r\n        collabSpace: 0,\r\n        einPrefix: 0,\r\n        docPrefix: 0,\r\n      };\r\n\r\n      // Convert collabSpaceTitles to lowercase for case-insensitive comparison\r\n      const lowerCaseCollabSpaceTitles = collabSpaceTitles.map(title => title.toLowerCase());\r\n\r\n      for (let chunkIndex = 0; chunkIndex < chunks.length; chunkIndex++) {\r\n        const chunk = chunks[chunkIndex];\r\n        const progress = Math.round(((chunkIndex + 1) / chunks.length) * 100);\r\n\r\n        chunk.forEach((row, indexInChunk) => {\r\n          const globalRowIndex = chunkIndex * 1000 + indexInChunk;\r\n\r\n          // Mandatory fields validation\r\n          mandatoryAttributes.forEach((field) => {\r\n            // Modified check that doesn't treat 0 as empty\r\n            if (\r\n              row[field] === undefined || \r\n              row[field] === null || \r\n              (row[field].toString().trim() === \"\" && row[field] !== 0)\r\n            ) {\r\n              errorStats.mandatory++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${field}\" is required but is empty`\r\n              );\r\n            }\r\n          });\r\n          // Collaborative Space validation\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            const userCollabSpace = row[\"Collaborative Space\"]?.trim().toLowerCase() || \"\";\r\n            if (!userCollabSpace || !lowerCaseCollabSpaceTitles.includes(userCollabSpace)) {\r\n              errorStats.collabSpace++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${\r\n                  userCollabSpace\r\n                    ? `You are not allowed to create in \"Collaborative Space -\" (${userCollabSpace})`\r\n                    : 'Collaborative Space\" is Missing or Empty'\r\n                }`\r\n              );\r\n            }\r\n          }\r\n          // NEW: Validate that the first data row for Physical Product Structure has Level = 0\r\n          if (\r\n            matchedOperation === \"Physical Product Structure\" &&\r\n            globalRowIndex === 0\r\n          ) {\r\n            const firstRow = allSheetData[0];\r\n            const levelValue = firstRow[\"Level\"];\r\n            const levelStr = String(levelValue).trim();\r\n            console.log(\r\n              \"Validating Level for Physical Product Structure, first row:\",\r\n              firstRow,\r\n              \"Parsed Level:\",\r\n              levelStr\r\n            );\r\n\r\n            if (\r\n              levelStr === \"\" ||\r\n              (levelStr !== \"0\" && Number(levelStr) !== 0)\r\n            ) {\r\n              // Add validation error for Level with row number and column name\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Level\" value \"${levelValue}\"  The first entry in the file should be a level 0 object.`\r\n              );\r\n              console.log(\r\n                \"Level validation failed - first row Level is not 0:\",\r\n                levelValue\r\n              );\r\n            }\r\n\r\n            \r\n          }\r\n\r\n          // EIN Number / Document Name validation\r\n          let valueToValidate = null;\r\n          let columnName = \"\";\r\n\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Physical Product Structure\"\r\n          ) {\r\n            columnName = \"EIN Number\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.einPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"EIN Number\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          } else if (\r\n            matchedOperation === \"Physical Product-Document\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            columnName = \"Document Name\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.docPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Document Name\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          }\r\n\r\n             // NEW: Validate that for Physical Product Structure, the \"Quantity\" value is positive (cannot be zero or negative)\r\n             if (matchedOperation === \"Physical Product Structure\") {\r\n              columnName = \"Quantity\";\r\n              const quantityValue = row[columnName]?.toString().trim();\r\n              if (quantityValue) {\r\n                const numQuantity = Number(quantityValue);\r\n                if (isNaN(numQuantity) || numQuantity <= 0) {\r\n                  validationErrors.push(\r\n                    `Row ${globalRowIndex + 2}: \"Quantity\" value \"${quantityValue}\" Quantity should not be 0 or -ve.`\r\n                  );\r\n                  console.log(\r\n                    \"Quantity validation failed - Quantity is 0 or -ve:\",\r\n                    quantityValue\r\n                  );\r\n                }\r\n              }\r\n            }\r\n        });\r\n\r\n        // Log only at 25% intervals\r\n        if (progress % 25 === 0) {\r\n          console.log(`Processing: ${progress}% complete`, {\r\n            processedRows: (chunkIndex + 1) * 1000,\r\n            totalRows: allSheetData.length,\r\n            currentErrors: {\r\n              mandatory: errorStats.mandatory,\r\n              collaborativeSpace: errorStats.collabSpace,\r\n              einPrefix: errorStats.einPrefix,\r\n              documentPrefix: errorStats.docPrefix,\r\n              total: validationErrors.length,\r\n            },\r\n          });\r\n        }\r\n      }\r\n\r\n      if (validationErrors.length > 0) {\r\n        console.log(\"❌ Validation completed with errors:\", {\r\n          total: validationErrors.length,\r\n          byType: errorStats,\r\n        });\r\n        reject({\r\n          errors: validationErrors,\r\n          headers,\r\n          mandatoryAttributes,\r\n        });\r\n        return;\r\n      }\r\n\r\n      console.log(\"✅ Validation completed successfully\");\r\n      resolve({\r\n        headers,\r\n        sheetData: allSheetData,\r\n        validationErrors: [],\r\n        mandatoryAttributes,\r\n      });\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.error(\" Error reading file\");\r\n      reject({\r\n        errors: [\"File reading failed.\"],\r\n        headers: [],\r\n        isTemplateMismatch: false,\r\n      });\r\n    };\r\n  });\r\n};\r\n\r\nexport default validateFile;\r\n","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport \"./customSelect.css\";\r\n\r\nconst CustomSelect = ({\r\n  index,\r\n  selectedValue,\r\n  onChange,\r\n  size,\r\n  className,\r\n  disabled,\r\n  options,\r\n}) => {\r\n  const defaultLabel = options?.defaultLabel || \"Please select\";\r\n  const list = options?.list || [];\r\n\r\n  const handleChange = (e) => {\r\n    // If index is provided use it, otherwise just pass the value\r\n    if (index !== undefined) {\r\n      onChange(index, e.target.value);\r\n    } else {\r\n      onChange(e.target.value);\r\n    }\r\n  };\r\n  // Check if we have grouped options (array of objects with label and options properties)\r\n  const hasGroupedOptions =\r\n    Array.isArray(list) &&\r\n    list.length > 0 &&\r\n    list[0] &&\r\n    \"label\" in list[0] &&\r\n    \"options\" in list[0];\r\n\r\n  // console.log(\"CustomSelect received options:\", {\r\n  //   list,\r\n  //   hasGroupedOptions,\r\n  //   selectedValue,\r\n  // });\r\n\r\n  return (\r\n    <Form.Select\r\n      aria-label=\"Attribute selection\"\r\n      value={selectedValue || \"\"}\r\n      onChange={handleChange}\r\n      size={size}\r\n      className={className}\r\n    >\r\n      <option value=\"\">{defaultLabel}</option> {/* Default option */}\r\n      {hasGroupedOptions\r\n        ? // Render grouped options with optgroup\r\n          list.map((group, groupIndex) => (\r\n            <optgroup key={`group-${groupIndex}`} label={group.label}>\r\n              {Array.isArray(group.options) &&\r\n                group.options.map((item, optionIndex) => (\r\n                  <option\r\n                    key={`option-${groupIndex}-${optionIndex}`}\r\n                    value={item.value}\r\n                  >\r\n                    {item.label}\r\n                  </option>\r\n                ))}\r\n            </optgroup>\r\n          ))\r\n        : // Render flat list of options\r\n          list.map((item, idx) => (\r\n            <option key={`option-${idx}`} value={item.value}>\r\n              {item.label}\r\n            </option>\r\n          ))}\r\n    </Form.Select>\r\n  );\r\n};\r\n\r\nexport default CustomSelect;\r\n","import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","// ConfirmationModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\n\r\nconst ConfirmationModal = ({ show, onHide, onConfirm }) => {\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Confirmation\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Confirm\",\r\n          variant: \"success\",\r\n          onClick: onConfirm,\r\n        },\r\n      ]}\r\n    >\r\n      <p>Are you sure you want to submit?</p>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport CustomSelect from \"../Select/customSelect\";\r\nimport \"./StaticTable.css\"; // Ensure updated styles are applied\r\n\r\nconst StaticTable = ({\r\n  columnHeaders,\r\n  handleSelectChange,\r\n  dropdownOptions = [],\r\n}) => {\r\n  return (\r\n    <Table bordered className=\"table-light\">\r\n      <thead>\r\n        <tr>\r\n          <th className=\"header-styling\">Column Name</th>\r\n          <th className=\"header-styling\">Attribute Name</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {columnHeaders.map((column, index) => {\r\n          const { header, currentMapping, defaultLabel, disabled } = column;\r\n          // Get filtered dropdown options for this specific column\r\n          const filteredOptions = dropdownOptions(header);\r\n\r\n          return (\r\n            <tr key={index} className={disabled ? \"disabled-row\" : \"\"}>\r\n              <td className={disabled ? \"disabled-cell\" : \"\"}>{header}</td>\r\n              <td\r\n                className={`dropdown-cell ${\r\n                  disabled ? \"disabled-dropdown\" : \"\"\r\n                }`}\r\n              >\r\n                <div className=\"dropdown-wrapper\">\r\n                  <CustomSelect\r\n                    index={index}\r\n                    selectedValue={currentMapping?.uiLabel || header}\r\n                    onChange={(index, value) =>\r\n                      handleSelectChange(header, value)\r\n                    }\r\n                    size=\"lg\"\r\n                    className={`w-100 ${\r\n                      disabled ? \"custom-select-disabled\" : \"\"\r\n                    }`}\r\n                    disabled={disabled} // Fully disables interaction\r\n                    options={{\r\n                      defaultLabel: defaultLabel,\r\n                      list: filteredOptions,\r\n                    }}\r\n                  />\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default StaticTable;\r\n","import React from \"react\";\r\nimport StaticTable from \"../../components/bootsrap-table/Table\";\r\n\r\nconst MappedList = ({\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  selectedMappings,\r\n  setSelectedMappings,\r\n  dropdownOptions,\r\n  allNLSValues,\r\n  operationChoice,\r\n}) => {\r\n  console.log(\"MappedList - Received columnHeaders:\", columnHeaders);\r\n  console.log(\r\n    \"MappedList - Received mandatoryAttributes:\",\r\n    mandatoryAttributes\r\n  );\r\n  console.log(\"MappedList - Received dropdownOptions:\", dropdownOptions);\r\n  console.log(\"MappedList - Received operationChoice:\", operationChoice);\r\n  console.log(\"MappedList - Received allNLSValues:\", allNLSValues);\r\n\r\n  // Checks if column header matches any NLS value\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) {\r\n      console.warn(\"allNLSValues is not an array:\", allNLSValues);\r\n      return false;\r\n    }\r\n\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    const hasMatch = allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    console.log(\r\n      `Checking if header '${header}' matches any NLS value:`,\r\n      hasMatch\r\n    );\r\n    return hasMatch;\r\n  };\r\n\r\n  // Gets backend name for selected UI label\r\n  const getBackendNameForUILabel = (uiLabel) => {\r\n    console.log(\"Finding backend name for UI label:\", uiLabel);\r\n    console.log(\"Current dropdown options:\", dropdownOptions);\r\n\r\n    if (\r\n      !dropdownOptions ||\r\n      !Array.isArray(dropdownOptions) ||\r\n      dropdownOptions.length === 0\r\n    ) {\r\n      console.warn(\"No dropdown options available\");\r\n      return uiLabel;\r\n    }\r\n\r\n    const option = dropdownOptions.find((opt) => opt.uiLabel === uiLabel);\r\n    console.log(\"Found option:\", option);\r\n    return option ? option.backendName : uiLabel;\r\n  };\r\n\r\n  // Prepare dropdown options for the table - filter out already selected values\r\n  const prepareDropdownOptions = (currentColumnHeader) => {\r\n    console.log(\"Preparing dropdown options for column:\", currentColumnHeader);\r\n\r\n    if (\r\n      !dropdownOptions ||\r\n      !Array.isArray(dropdownOptions) ||\r\n      dropdownOptions.length === 0\r\n    ) {\r\n      console.warn(\"No dropdown options available for filtering\");\r\n      return [];\r\n    }\r\n\r\n    const selectedValues = Object.entries(selectedMappings)\r\n      .filter(([header]) => header !== currentColumnHeader)\r\n      .map(([_, mapping]) => mapping.uiLabel || mapping.mappedAttribute);\r\n\r\n    // For operation 2, we want to group options by their categories\r\n    if (operationChoice === \"2\") {\r\n      console.log(\r\n        \"Using grouped dropdown options for Product Structure operation\"\r\n      );\r\n\r\n      // Create grouped options structure\r\n      const groupedOptions = [];\r\n\r\n      // Debug information about existing data\r\n      console.log(\"All dropdown options:\", dropdownOptions);\r\n\r\n      // Look for EBOM attributes in the dropdown options\r\n      const ebomAttributes = dropdownOptions\r\n        .filter(\r\n          (attr) =>\r\n            (attr.group === \"EBOM Attributes\" ||\r\n              attr.group === \"EBOM Attributes\") &&\r\n            !selectedValues.includes(attr.uiLabel)\r\n        )\r\n        .map((attr) => ({\r\n          value: attr.uiLabel,\r\n          label: attr.uiLabel,\r\n        }));\r\n\r\n      console.log(\"Filtered EBOM attributes:\", ebomAttributes);\r\n\r\n      // Always add EBOM Attributes group if we have any EBOM attributes\r\n      if (ebomAttributes.length > 0) {\r\n        groupedOptions.push({\r\n          label: \"EBOM Attributes\",\r\n          options: ebomAttributes,\r\n        });\r\n      }\r\n\r\n      // Add any Part Attributes group\r\n      const partAttributes = dropdownOptions\r\n        .filter(\r\n          (attr) =>\r\n            attr.group !== \"EBOM Attributes\" &&\r\n            attr.group !== \"System Attributes\" &&\r\n            !selectedValues.includes(attr.uiLabel)\r\n        )\r\n        .map((attr) => ({\r\n          value: attr.uiLabel,\r\n          label: attr.uiLabel,\r\n        }));\r\n\r\n      console.log(\"Filtered Part attributes:\", partAttributes);\r\n\r\n      if (partAttributes.length > 0) {\r\n        groupedOptions.push({\r\n          label: \"Item Attributes\",\r\n          options: partAttributes,\r\n        });\r\n      }\r\n\r\n      console.log(\"Final grouped dropdown options:\", groupedOptions);\r\n      return groupedOptions;\r\n    }\r\n\r\n    // For other operations, return flat list as before\r\n    const filteredOptions = dropdownOptions\r\n      .filter((attr) => !selectedValues.includes(attr.uiLabel))\r\n      .map((attr) => ({\r\n        value: attr.uiLabel,\r\n        label: attr.uiLabel,\r\n      }));\r\n\r\n    return filteredOptions;\r\n  };\r\n\r\n  // Handles selection changes from Table\r\n  const handleSelectChange = (columnHeader, value) => {\r\n    console.log(\r\n      \"Selection changed for column:\",\r\n      columnHeader,\r\n      \"to value:\",\r\n      value\r\n    );\r\n\r\n    const backendName = getBackendNameForUILabel(value);\r\n    console.log(\"Mapped backend name:\", backendName);\r\n\r\n    setSelectedMappings((prev) => ({\r\n      ...prev,\r\n      [columnHeader]: {\r\n        columnName: columnHeader,\r\n        uiLabel: value,\r\n        mappedAttribute: backendName,\r\n        isMandatory: mandatoryAttributes.includes(columnHeader),\r\n      },\r\n    }));\r\n  };\r\n\r\n  // Prepare column data with all needed information\r\n  const prepareColumnsData = () => {\r\n    return columnHeaders.map((header) => {\r\n      const hasNLS = hasMatchingNLS(header);\r\n      const isMandatory = mandatoryAttributes.includes(header);\r\n\r\n      return {\r\n        header,\r\n        isMandatory,\r\n        hasNLS,\r\n        currentMapping: selectedMappings[header],\r\n        defaultLabel: hasNLS ? header : \"Please select from Drop Down\",\r\n        disabled: hasNLS && isMandatory,\r\n      };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <StaticTable\r\n      columnHeaders={prepareColumnsData()}\r\n      handleSelectChange={handleSelectChange}\r\n      selectedMappings={selectedMappings}\r\n      dropdownOptions={(header) => prepareDropdownOptions(header)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MappedList;\r\n","// ColumnMappingModal.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ReusableAlert from \"../../components/Alert/ReusableAlert\";\r\nimport MappedList from \"../../pages/mass-upload/mappedList\";\r\n\r\nconst ColumnMappingModal = ({\r\n  show, //controls modal visibility//\r\n  onHide, //function to hide modal//\r\n  columnHeaders, //array of column names from Excel//\r\n  mandatoryAttributes, //required fields from excel//\r\n  onColumnsMapped, //callback to receive the final mapping\r\n  existingMappings = {}, // Add this prop for existing mappings\r\n  dropdownOptions, // Receive dropdownOptions\r\n  allNLSValues, // Add this prop\r\n  operationChoice, // Add operation choice\r\n}) => {\r\n  // Initialize with existing mappings if available\r\n  const [selectedMappings, setSelectedMappings] = useState(existingMappings);\r\n\r\n  // Reset mappings when modal is opened with new existingMappings\r\n  useEffect(() => {\r\n    if (show && Object.keys(existingMappings).length > 0) {\r\n      setSelectedMappings(existingMappings);\r\n    }\r\n  }, [show, existingMappings]);\r\n\r\n  console.log(\"ColumnMappingModal NLS values:\", allNLSValues);\r\n\r\n  const handleOkClick = () => {\r\n    console.group(\"Column Mapping Results\");\r\n    console.log(\"Raw Mappings:\", selectedMappings);\r\n\r\n    // Create complete mappings including unmapped columns\r\n    const completeMappings = {};\r\n\r\n    // Start with existing mappings to ensure we don't lose any\r\n    const simplifiedMappings = { ...existingMappings };\r\n\r\n    // Helper function to check if column has matching NLS\r\n    const hasMatchingNLS = (header) => {\r\n      if (!Array.isArray(allNLSValues)) return false;\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      return allNLSValues.some(\r\n        (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n      );\r\n    };\r\n\r\n    // Helper function to get backend name for a column with NLS match\r\n    const getBackendNameForHeader = (header) => {\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      const matchingOption = dropdownOptions.find(\r\n        (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n      );\r\n      return matchingOption ? matchingOption.backendName : header;\r\n    };\r\n\r\n    // Special mapping for known attributes that might not have NLS matches\r\n    const specialMappings = {\r\n      \"EIN Number\": \"PartNumber\",\r\n    };\r\n\r\n    // Process all column headers\r\n    columnHeaders.forEach((columnName) => {\r\n      if (selectedMappings[columnName]) {\r\n        // Column was mapped by user - extract the proper backend name\r\n        const userMapping = selectedMappings[columnName];\r\n\r\n        // Handle both object and string mappings\r\n        if (typeof userMapping === \"object\" && userMapping !== null) {\r\n          // It's an object with mappedAttribute property\r\n          completeMappings[columnName] = userMapping;\r\n          simplifiedMappings[columnName] = userMapping.mappedAttribute;\r\n        } else {\r\n          // It's already a string\r\n          completeMappings[columnName] = {\r\n            columnName: columnName,\r\n            uiLabel: columnName,\r\n            mappedAttribute: userMapping,\r\n            isMandatory: mandatoryAttributes.includes(columnName),\r\n            autoMapped: false,\r\n          };\r\n          simplifiedMappings[columnName] = userMapping;\r\n        }\r\n      } else {\r\n        // Column was not manually mapped - check if it already has a mapping\r\n        if (existingMappings[columnName]) {\r\n          // Use existing mapping\r\n          const existingMapping = existingMappings[columnName];\r\n\r\n          if (typeof existingMapping === \"object\" && existingMapping !== null) {\r\n            // It's an object with mappedAttribute\r\n            completeMappings[columnName] = existingMapping;\r\n            simplifiedMappings[columnName] = existingMapping.mappedAttribute;\r\n          } else {\r\n            // It's a string backend name\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: existingMapping,\r\n              isMandatory: mandatoryAttributes.includes(columnName),\r\n              autoMapped: true,\r\n            };\r\n            // simplifiedMappings already has this from the spread above\r\n          }\r\n        } else {\r\n          // No existing mapping - try to create one\r\n          const hasNLS = hasMatchingNLS(columnName);\r\n          const isSpecialColumn = specialMappings[columnName];\r\n          const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n          if (hasNLS || isSpecialColumn || isMandatory) {\r\n            const mappedAttribute = isSpecialColumn\r\n              ? specialMappings[columnName]\r\n              : getBackendNameForHeader(columnName);\r\n\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: mappedAttribute,\r\n              isMandatory: isMandatory,\r\n              autoMapped: true,\r\n            };\r\n\r\n            simplifiedMappings[columnName] = mappedAttribute;\r\n          } else {\r\n            // For unmapped columns without NLS match, use column name as attribute\r\n            simplifiedMappings[columnName] = columnName;\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: columnName,\r\n              isMandatory: false,\r\n              autoMapped: false,\r\n            };\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Create final mapping object with complete mappings\r\n    const finalMapping = {\r\n      columnMappings: completeMappings,\r\n      totalColumns: Object.keys(completeMappings).length,\r\n    };\r\n\r\n    console.log(\"Final Mapping Object:\", finalMapping);\r\n    console.log(\"Simplified Mappings for Backend:\", simplifiedMappings);\r\n    console.groupEnd();\r\n\r\n    // Call the callback with the mappings if provided\r\n    if (onColumnsMapped) {\r\n      onColumnsMapped(simplifiedMappings, finalMapping);\r\n    }\r\n\r\n    onHide();\r\n  };\r\n\r\n  console.log(\r\n    \"ColumnMappingModal - received dropdownOptions:\",\r\n    dropdownOptions\r\n  );\r\n  console.log(\"ColumnMappingModal - operation choice:\", operationChoice);\r\n\r\n  const errorMessage = (\r\n    <>\r\n      <strong>⚠️Note:</strong> All column(s) of uploaded Spreadsheet are mapped\r\n      to valid Attribute Name. All mandatory Attribute Name is mapped to\r\n      uploaded Spreadsheet Column Name.\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Manage Spreadsheet Columns\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Ok\",\r\n          variant: \"primary\",\r\n          onClick: handleOkClick,\r\n        },\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Reset\",\r\n          variant: \"secondary\",\r\n          onClick: () => setSelectedMappings({}),\r\n        },\r\n      ]}\r\n    >\r\n      <ReusableAlert\r\n        variant=\"info\"\r\n        message={errorMessage}\r\n        className=\"mapped-popup-alert\"\r\n      />\r\n      <MappedList\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n        selectedMappings={selectedMappings}\r\n        setSelectedMappings={setSelectedMappings}\r\n        dropdownOptions={dropdownOptions}\r\n        allNLSValues={allNLSValues} // Pass this to MappedList\r\n        operationChoice={operationChoice} // Pass operation choice\r\n      />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ColumnMappingModal;\r\n","// TableModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\n\r\nconst TableModal = ({\r\n  show,\r\n  onHide,\r\n  data, \r\n  columns\r\n}) => {\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n    >\r\n      <ReusableTable\r\n        data={data}\r\n        columns={columns}\r\n      />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default TableModal;\r\n","// pages/revisionFloat/dataHelpers.js\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faXmark } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst CheckmarkCell = () => (\r\n  <FontAwesomeIcon icon={faCheck} className=\"green-icon\" />\r\n);\r\n\r\nconst CrossmarkCell = () => (\r\n  <FontAwesomeIcon icon={faXmark} className=\"cross-icon\" />\r\n);\r\n\r\nexport const getTableData = () => {\r\n    return [\r\n      {\r\n        EIN: \"EIN001\",\r\n        Title: \"Sample Document A\",\r\n        Description: \"A test document for validation\",\r\n        Type: \"Document\",\r\n        Revision: \"A\",\r\n        \"Dropped Revision ID\": \"DR-A-001\",\r\n        \"Connected Child Revision\": \"Rev-1\",\r\n        \"Latest child connected\": true,\r\n        \"To-Be child connected\": \"-\",\r\n        State: \"Released\",\r\n        Owner: \"Alice\",\r\n        \"CAD Format\": \"PDF\",\r\n        Collabspace: \"Engineering Space\",\r\n        relationship: \"Derived From\",\r\n      },\r\n      {\r\n        EIN: \"EIN002\",\r\n        Title: \"Sample Product B\",\r\n        Description: \"Second row with product data\",\r\n        Type: \"Physical Product\",\r\n        Revision: \"B\",\r\n        \"Dropped Revision ID\": \"DR-B-002\",\r\n        \"Connected Child Revision\": \"Rev-2\",\r\n        \"Latest child connected\": false,\r\n        \"To-Be child connected\": \"Rev-3\",\r\n        State: \"In Work\",\r\n        Owner: \"Bob\",\r\n        \"CAD Format\": \"STEP\",\r\n        Collabspace: \"Manufacturing\",\r\n        relationship: \"Part Of\",\r\n      },\r\n      {\r\n        EIN: \"EIN003\",\r\n        Title: \"Raw Material X\",\r\n        Description: \"Raw material used in assembly\",\r\n        Type: \"Raw Material\",\r\n        Revision: \"C\",\r\n        \"Dropped Revision ID\": \"DR-C-003\",\r\n        \"Connected Child Revision\": \"Rev-1\",\r\n        \"Latest child connected\": true,\r\n        \"To-Be child connected\": \"-\",\r\n        State: \"Preliminary\",\r\n        Owner: \"Charlie\",\r\n        \"CAD Format\": \"IGES\",\r\n        Collabspace: \"Materials\",\r\n        relationship: \"Contained In\",\r\n      }\r\n    ];\r\n  };\r\n  \r\n\r\nexport const tableColumns = [\r\n  {\r\n    accessorKey: \"EIN\",\r\n    header: \"EIN\",\r\n    columnPinning: true,\r\n  },\r\n  { accessorKey: \"Title\", header: \"Title\" },\r\n  { accessorKey: \"Description\", header: \"Description\" },\r\n  { accessorKey: \"Type\", header: \"Type\" },\r\n  { accessorKey: \"Revision\", header: \"Revision\" },\r\n  {\r\n    accessorKey: \"Connected Child Revision\",\r\n    header: \"Connected Revision\",\r\n  },\r\n  {\r\n    accessorKey: \"Latest child connected\",\r\n    header: \"latest Revision Connected\",\r\n    cell: ({ cell }) => {\r\n      const value = cell.getValue();\r\n      // Render a checkmark if true, a cross if false\r\n      return value ? <CheckmarkCell /> : <CrossmarkCell />;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: \"To-Be child connected\",\r\n    header: \"Revision to-be Connected\",\r\n  },\r\n  {\r\n    accessorKey: \"relationship\",\r\n    header: \"Relationship\",\r\n  },\r\n  { accessorKey: \"State\", header: \"State\" },\r\n  { accessorKey: \"Owner\", header: \"Owner\" },\r\n  { accessorKey: \"CAD Format\", header: \"CAD Format\" },\r\n  { accessorKey: \"Collabspace\", header: \"Collabspace\" },\r\n];\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService, fetchData } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useMassUpload = (initialOperationChoice) => {\r\n  const { showErrorToast } = useToast();\r\n  const [mappedAttributes, setMappedAttributes] = useState([]);\r\n  const [operationChoice, setOperationChoice] = useState(initialOperationChoice);\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  // Function to Fetch Spreadsheet Column Mapping\r\n  const fetchColumnMapping = async (operation = null) => {\r\n    try {\r\n      // Use the passed operation or fall back to state\r\n      const effectiveOperation = operation || operationChoice;\r\n      console.log(\"Fetching column mapping for operation:\", effectiveOperation);\r\n\r\n      if (!effectiveOperation) {\r\n        console.log(\"No operation specified, skipping fetch\");\r\n        return;\r\n      }\r\n\r\n      // Update state if a new operation is passed\r\n      if (operation && operation !== operationChoice) {\r\n        setOperationChoice(operation);\r\n      }\r\n\r\n      console.log(\"Fetching column mapping...\");\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      // 🔹 Step 1: Call API 1 (GET) to Fetch Metadata\r\n      const metadataResponse = await callEnoviaWebService(\r\n        \"GET\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?%24top=1`,\r\n        \"\",\r\n        headers\r\n      );\r\n\r\n      if (!metadataResponse || !metadataResponse.output) {\r\n        throw new Error(\"Failed to fetch metadata.\");\r\n      }\r\n      console.log(\"Metadata Member:\", metadataResponse.output.member);\r\n\r\n      const objectId = metadataResponse.output?.member?.[0]?.id;\r\n      if (!objectId) {\r\n        throw new Error(\"No object ID found in metadata.\");\r\n      }\r\n\r\n      console.log(\"Extracted Object ID:\", objectId);\r\n\r\n      // 🔹 Step 2: Call API 2 (POST) to Fetch Attributes\r\n      const attributeResponse = await callEnoviaWebService(\r\n        \"POST\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/collabServices/attributes/op/read?tenant=OI000186152&xrequestedwith=xmlhttprequest`,\r\n        {\r\n          busIDs: [objectId],\r\n        },\r\n        headers\r\n      );\r\n\r\n      if (!attributeResponse || !attributeResponse.output) {\r\n        throw new Error(\"Failed to fetch attribute data.\");\r\n      }\r\n      console.log(\"Attribute Response:\", attributeResponse.output);\r\n\r\n      // 🔹 Step 3: Extract & Map Relevant Attributes\r\n\r\n      const groupData = attributeResponse.output.results?.[0]?.groupData || [];\r\n\r\n      console.log(\r\n        \"Full Group Data (with all NLS values):\",\r\n        groupData.map((item) => item.nls)\r\n      );\r\n\r\n      const systemAttributes = [\r\n        {\r\n          name: \"description\", // Change from backendName to name\r\n          nls: \"Description\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"Part Number\", // Change from backendName to name\r\n          nls: \"EIN Number\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"type\", // Change from backendName to name\r\n          nls: \"Type\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"title\", // Change from backendName to name\r\n          nls: \"Title\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"collabspaceTitle\", // Change from backendName to name\r\n          nls: \"Collaborative Space\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n      ];\r\n\r\n      // Define EBOM attributes for Product Structure operation\r\n      let ebomAttributes = [];\r\n      if (effectiveOperation === \"2\") {\r\n        ebomAttributes = [\r\n          {\r\n            name: \"MBOMFindNumber__e7ead0d4e78a4d7f99e9e5fd900f8fdf\",\r\n            nls: \"Find Number\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name: \"MBOMComponentLocation__00cc2e44830642d69dd3728d8c279a75\",\r\n            nls: \"Component Location\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name:\"Level\",\r\n            nls: \"Level\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n            \r\n          }\r\n        ];\r\n      }\r\n\r\n      const attributeGroups = groupData.map((item) => item.groupNLS);\r\n      console.log(\"Attribute Groups:\", attributeGroups);\r\n\r\n      // Add EBOM Attributes group for operation 2\r\n      if (effectiveOperation === \"2\" && !attributeGroups.includes(\"EBOM Attributes\")) {\r\n        attributeGroups.push(\"EBOM Attributes\");\r\n      }\r\n\r\n      // Get NLS values from API response\r\n      const apiNlsValues = groupData.map((item) => item.nls);\r\n      console.log(\"API NLS Values:\", apiNlsValues);\r\n\r\n      // Get NLS values from hardcoded system attributes\r\n      const systemNlsValues = systemAttributes.map((item) => item.nls);\r\n      console.log(\"System NLS Values:\", systemNlsValues);\r\n\r\n      // Get NLS values from EBOM attributes when operation is 2\r\n      let ebomNlsValues = [];\r\n      if (effectiveOperation === \"2\") {\r\n        ebomNlsValues = ebomAttributes.map((item) => item.nls);\r\n        console.log(\"EBOM NLS Values:\", ebomNlsValues);\r\n      }\r\n\r\n      // Combine all NLS values including EBOM attributes if operation is 2\r\n      const allNLSValues = [...new Set([...apiNlsValues, ...systemNlsValues, ...ebomNlsValues])];\r\n      console.log(\"all nls value with Hardcode :\", allNLSValues);\r\n\r\n      // First filter out System Attributes from API response\r\n      const filteredGroupData = groupData.filter(\r\n        (attr) => attr.groupNLS !== \"System Attributes\"\r\n      );\r\n\r\n      console.log(\r\n        \"Filtered out API system attributes:\",\r\n        groupData.length - filteredGroupData.length,\r\n        \"items removed\"\r\n      );\r\n\r\n      // Then merge non-system API attributes with hardcoded ones and EBOM attributes\r\n      let mergeAttributes = [...filteredGroupData, ...systemAttributes];\r\n      if (effectiveOperation === \"2\") {\r\n        mergeAttributes = [...mergeAttributes, ...ebomAttributes];\r\n        console.log(\"Added EBOM attributes to merged attributes for operation 2\", mergeAttributes);\r\n      }\r\n\r\n      // Then continue with your other filtering if needed\r\n      const relevantAttributes =\r\n        mergeAttributes.filter(\r\n          (attr) =>\r\n            attr.deploymentExtension === true ||\r\n            (attr.groupNLS && attr.groupNLS.trim() !== \"\") ||\r\n            (effectiveOperation === \"2\" && attr.group === \"EBOM Attributes\")\r\n        ) || [];\r\n\r\n      console.log(\"Non-system attributes from API:\", relevantAttributes.length);\r\n\r\n      const mappedData = relevantAttributes.map((attr) => ({\r\n        uiLabel: attr.nls, // UI Display Name\r\n        backendName: attr.name || attr.backendName, // Backend Name (or name)\r\n        group: attr.groupNLS || attr.group || \"General\", // Default group if not specified\r\n      }));\r\n\r\n      // Create a filtered version for dropdown that excludes System Attributes\r\n      const dropdownOptions = mappedData.filter(\r\n        (attr) => attr.group !== \"System Attributes\"\r\n      );\r\n      console.log(\"Mapped Attributes (total):\", mappedData);\r\n      console.log(\r\n        \"Dropdown Options (excluding System Attributes):\",\r\n        dropdownOptions\r\n      );\r\n      \r\n      // Organize attributes by their groups\r\n      const attributesByGroup = {};\r\n\r\n      attributeGroups.forEach((group) => {\r\n        attributesByGroup[group] = mappedData.filter(\r\n          (attr) => attr.group === group\r\n        );\r\n      });\r\n\r\n      console.log(\"Mapped Attributes:\", mappedData);\r\n      console.log(\"All available NLS values:\", allNLSValues);\r\n      console.log(\r\n        \"Mapped Attributes (for dropdown) excluding System Attributes:\",\r\n        dropdownOptions\r\n      );\r\n      console.log(\"Attributes By Group:\", attributesByGroup);\r\n      console.log(\r\n        \"System Attributes found:\",\r\n        relevantAttributes.filter(\r\n          (attr) => attr.groupNLS === \"System Attributes\"\r\n        ).length\r\n      );\r\n      console.log(\r\n        \"Sample System Attribute:\",\r\n        relevantAttributes.find((attr) => attr.groupNLS === \"System Attributes\")\r\n      );\r\n\r\n      // For operation 2, log EBOM attributes as well\r\n      if (effectiveOperation === \"2\") {\r\n        console.log(\r\n          \"EBOM Attributes found:\",\r\n          relevantAttributes.filter(\r\n            (attr) => attr.groupNLS === \"EBOM Attributes\" || attr.group === \"EBOM Attributes\"\r\n          ).length\r\n        );\r\n        console.log(\r\n          \"Sample EBOM Attribute:\",\r\n          relevantAttributes.find((attr) => attr.groupNLS === \"EBOM Attributes\" || attr.group === \"EBOM Attributes\")\r\n        );\r\n      }\r\n\r\n      setMappedAttributes({\r\n        allNLSValues: allNLSValues,\r\n        dropdownOptions: dropdownOptions, // Use filtered list without System Attributes\r\n        mappedData: mappedData, // Keep full list for other purposes\r\n        attributesByGroup: attributesByGroup,\r\n        groups: attributeGroups,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching column mapping:\", error);\r\n      showErrorToast(error.message || \"Error fetching column mapping.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (operationChoice) {\r\n      fetchColumnMapping();\r\n    }\r\n  }, [operationChoice]);\r\n\r\n  return { mappedAttributes, refreshMapping: fetchColumnMapping };\r\n};\r\n\r\nexport default useMassUpload;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useFetchDocumentData = (initialOperationType) => {\r\n  const { showErrorToast } = useToast();\r\n  const [documentData, setDocumentData] = useState(null);\r\n  const [mappedAttributes, setMappedAttributes] = useState({\r\n    allNLSValues: [],\r\n    dropdownOptions: [],\r\n    mappedData: [],\r\n  });\r\n  const [operationType, setOperationType] = useState(initialOperationType);\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  const API_URL = `${ENOVIA_BASE_URL}/resources/v1/collabServices/authoring/createContent/typeInfo?tenant=OI000186152&xrequestedwith=xmlhttprequest`;\r\n\r\n  const fetchDocumentData = async (operation = null) => {\r\n    // Use passed operation or fall back to state\r\n    const effectiveOperation = operation || operationType;\r\n\r\n    if (effectiveOperation !== \"3\") {\r\n      console.log(\"Not document operation type, skipping fetch\");\r\n      return;\r\n    }\r\n\r\n    // Update state if new operation passed\r\n    if (operation && operation !== operationType) {\r\n      setOperationType(operation);\r\n    }\r\n\r\n    try {\r\n      console.log(\r\n        \"Fetching document data for operation type:\",\r\n        effectiveOperation\r\n      );\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        console.error(\"Failed to fetch CSRF headers.\");\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      const body = {\r\n        type: \"Document\",\r\n        preferedType: \"Document\",\r\n        typeName: \"Document\",\r\n        subTypes: true,\r\n        runUXBL: true,\r\n        metrics: {\r\n          UXName: \"New\",\r\n          client_app_domain: \"3DEXPERIENCE 3DDashboard\",\r\n          client_app_name: \"ENXWDOC_AP\",\r\n        },\r\n      };\r\n\r\n      // Fetch data from API\r\n      const response = await callEnoviaWebService(\r\n        \"POST\",\r\n        API_URL,\r\n        body,\r\n        headers\r\n      );\r\n      console.log(\"API Response for Document template:\", response);\r\n\r\n      // Validate response structure\r\n      if (response.status !== true) {\r\n        console.error(\"Invalid API response structure:\", response);\r\n        showErrorToast(\r\n          \"Failed to fetch document data. Invalid response structure.\"\r\n        );\r\n        return;\r\n      }\r\n\r\n      // Extract relevant data\r\n      const documentInfo = response.output.result[0];\r\n      console.log(\r\n        \"Full documentInfo structure:\",\r\n        JSON.stringify(documentInfo, null, 2)\r\n      );\r\n\r\n      // Check different possible paths for extensionAttributes\r\n      const extensionAttributes =\r\n        documentInfo?.extensionAttributes ||\r\n        documentInfo?.attributes?.extensionAttributes ||\r\n        [];\r\n\r\n      console.log(\"Found extensionAttributes:\", extensionAttributes);\r\n\r\n      // Your hardcoded document attributes\r\n      const DocumentsAttributes = [\r\n        {\r\n          name: \"description\",\r\n          nls: \"Description\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"name\",\r\n          nls: \"Document Name\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"type\",\r\n          nls: \"Documentg Type\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"title\",\r\n          nls: \"Title\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"collabspaceTitle\",\r\n          nls: \"Collaborative Space\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n      ];\r\n\r\n      // Extract dropdown options only if extensionAttributes exists\r\n      if (extensionAttributes && extensionAttributes.length > 0) {\r\n        // Extract all NLS values from API\r\n        const apiNlsValues = extensionAttributes.map((attr) => attr.nls);\r\n        console.log(\"API NLS Values:\", apiNlsValues);\r\n\r\n        // Extract NLS values from hardcoded attributes\r\n        const hardcodedNlsValues = DocumentsAttributes.map((attr) => attr.nls);\r\n        console.log(\"Hardcoded NLS Values:\", hardcodedNlsValues);\r\n\r\n        // Combine both NLS value sets (using Set to remove duplicates)\r\n        const allNLSValues = [\r\n          ...new Set([...apiNlsValues, ...hardcodedNlsValues]),\r\n        ];\r\n        console.log(\r\n          \"Document Operation - All Combined NLS Values:\",\r\n          allNLSValues\r\n        );\r\n\r\n        // Process API attributes (with name splitting)\r\n        const apiOptions = extensionAttributes.map((attr) => {\r\n          // Extract the attribute name after the dot\r\n          const fullName = attr.name;\r\n          const nameParts = fullName.split(\".\");\r\n          const extractedName = nameParts.length > 1 ? nameParts[1] : fullName;\r\n\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: extractedName,\r\n            fullName: attr.name,\r\n            group: \"API Attributes\",\r\n          };\r\n        });\r\n\r\n        // Process hardcoded attributes\r\n        const hardcodedOptions = DocumentsAttributes.map((attr) => {\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: attr.name,\r\n            group: attr.groupNLS,\r\n          };\r\n        });\r\n\r\n        // Combine both for mappedData\r\n        const combinedMappedData = [...apiOptions, ...hardcodedOptions];\r\n\r\n        console.log(\"Document Operation - API Dropdown Options:\", apiOptions);\r\n        console.log(\r\n          \"Document Operation - Combined Mapped Data:\",\r\n          combinedMappedData\r\n        );\r\n\r\n        // Update state with specific configurations for each property\r\n        setMappedAttributes({\r\n          allNLSValues: allNLSValues, // Combined NLS values for matching\r\n          dropdownOptions: apiOptions, // Only API options for dropdown\r\n          mappedData: combinedMappedData, // Both API and hardcoded for payload\r\n        });\r\n      } else {\r\n        // If no API attributes, use hardcoded ones for everything\r\n        const hardcodedNlsValues = DocumentsAttributes.map((attr) => attr.nls);\r\n\r\n        // Create hardcoded options for mappedData when no API data exists\r\n        const hardcodedOptions = DocumentsAttributes.map((attr) => {\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: attr.name,\r\n            group: attr.groupNLS,\r\n          };\r\n        });\r\n\r\n        setMappedAttributes({\r\n          allNLSValues: hardcodedNlsValues, // Use hardcoded NLS for matching\r\n          dropdownOptions: [], // Empty dropdown options as requested\r\n          mappedData: hardcodedOptions, // Use hardcoded options for payload\r\n        });\r\n      }\r\n\r\n      // Set the document data in state\r\n      setDocumentData(documentInfo);\r\n    } catch (error) {\r\n      console.error(\"Error fetching document data:\", error);\r\n      showErrorToast(error.message || \"Error fetching document data.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (operationType === \"3\") {\r\n      fetchDocumentData();\r\n    }\r\n  }, [operationType]);\r\n\r\n  // Return structure matching useMassUpload\r\n  return {\r\n    mappedAttributes,\r\n    refreshMapping: fetchDocumentData,\r\n  };\r\n};\r\n\r\nexport default useFetchDocumentData;\r\n","import React, { useState, useEffect, useRef,useMemo } from \"react\";\r\nimport { useSelector, shallowEqual } from \"react-redux\";\r\nimport \"./Mockup.css\";\r\nimport { Form, Stack } from \"react-bootstrap\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\nimport FileUpload from \"../../components/FileUploader/FileUploader\";\r\nimport { downloadTemplate } from \"../../utils/downloadTemplate\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport validateFile from \"./validateFile\";\r\nimport CustomSelect from \"../../components/Select/customSelect\";\r\nimport { globalCollabSpaceTitles } from \"../../services/api/droppableService\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\nimport ColumnMappingModal from \"../../components/Modals/ColumnMappingModal\";\r\nimport TableModal from \"../../components/Modals/TableModel\";\r\nimport { getTableData, tableColumns } from \"./massUploadDataHelper\";\r\nimport api from \"../../utils/api\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\nimport useFetchDocumentData from \"../../hooks/Mass-Upload/useMassUploadDocument\";\r\nimport getUserDetails from \"../../utils/getUserDetails\";\r\n\r\nconst API_ENDPOINTS = {\r\n  1: \"/massUpload/uploadPhysicalProduct\",\r\n  2: \"/massUpload/uploadProductStructure\",\r\n  3: \"/massUpload/documents\",\r\n  4: \"/massUpload/uploadProductDocument\",\r\n};\r\n\r\nconst transformSheetDataWithMappings = (\r\n  sheetData,\r\n  columnMappings,\r\n  operationType,\r\n  mappedAttributesData\r\n) => {\r\n  if (sheetData.length > 0) {\r\n    console.log(\r\n      \"Actual column names in sheet data:\",\r\n      Object.keys(sheetData[0])\r\n    );\r\n    console.log(\"Sample row values:\", sheetData[0]);\r\n    console.log(\"Column mappings applied:\", columnMappings);\r\n  }\r\n\r\n  if (!sheetData || !columnMappings) {\r\n    console.error(\"Missing data or mappings for transformation\");\r\n    return null;\r\n  }\r\n\r\n  console.log(\"Transforming sheet data with mappings:\", columnMappings);\r\n  const mappedData = mappedAttributesData?.mappedData || [];\r\n\r\n  console.log(\"Mapped data in Massupload:\", mappedData);\r\n\r\n  // For Document operation type (3), use different processing logic\r\n  if (operationType === \"3\") {\r\n    console.log(\"Processing document data with operation type 3\");\r\n\r\n    // Transform each row into document format\r\n    // Transform each row into document format\r\n    const documentItems = sheetData.map((row) => {\r\n      // Create separate objects for root-level data and nested dataelements\r\n      const rootData = {};\r\n      const dataelements = {};\r\n      const apiAttributes = {}; // For storing API attributes\r\n\r\n      Object.entries(row).forEach(([columnName, value]) => {\r\n        if (\r\n          !columnMappings[columnName] ||\r\n          value === undefined ||\r\n          value === null\r\n        )\r\n          return;\r\n\r\n        const backendFieldName = columnMappings[columnName];\r\n\r\n        // Find attribute in mappedData to check if it's an API attribute\r\n        const attribute = mappedData.find(\r\n          (attr) =>\r\n            attr.uiLabel === backendFieldName ||\r\n            attr.backendName === backendFieldName\r\n        );\r\n\r\n        console.log(\r\n          `Processing column ${columnName} -> ${backendFieldName}`,\r\n          attribute\r\n        );\r\n\r\n        // Special case handling for known fields\r\n        if (backendFieldName === \"Document Type\") {\r\n          rootData[\"Classification Type\"] = value;\r\n        } else if (backendFieldName === \"Collaborative Space\") {\r\n          rootData[\"collabspaceTitle\"] = value;\r\n        } else if (\r\n          backendFieldName.toLowerCase().includes(\"collaborative\") ||\r\n          backendFieldName.toLowerCase().includes(\"collab\")\r\n        ) {\r\n          // Try to catch variations of Collaborative Space\r\n          rootData[\"collabspaceTitle\"] = value;\r\n        } else if (backendFieldName === \"Document Name\") {\r\n          dataelements[\"name\"] = value;\r\n        }\r\n        // For API attributes with group \"API Attributes\", include them with their fullName\r\n        else if (\r\n          attribute &&\r\n          attribute.group === \"API Attributes\" &&\r\n          attribute.fullName\r\n        ) {\r\n          // Store API attributes using their full name\r\n          apiAttributes[attribute.backendName] = value;\r\n          // console.log(\r\n          //   `Added API attribute: ${attribute.backendName} = ${value}`\r\n          // );\r\n        }\r\n        // For regular mapped fields that aren't API attributes\r\n        else if (attribute || backendFieldName) {\r\n          // Only include mapped fields (either through attribute lookup or direct mapping)\r\n          dataelements[backendFieldName] = value;\r\n        }\r\n        // Fields without mappings or API attribute status are excluded\r\n      });\r\n\r\n      // Combine root data, dataelements, and API attributes\r\n      return {\r\n        ...rootData,\r\n        dataelements,\r\n        ...apiAttributes, // Include API attributes at root level\r\n      };\r\n    });\r\n\r\n    // Log sample document for verification\r\n    if (documentItems.length > 0) {\r\n      console.log(\r\n        \"Sample document structure:\",\r\n        JSON.stringify(documentItems[0], null, 2)\r\n      );\r\n    }\r\n\r\n    // Create chunks for batched processing\r\n    const CHUNK_SIZE = 1000;\r\n    const chunks = [];\r\n\r\n    for (let i = 0; i < documentItems.length; i += CHUNK_SIZE) {\r\n      chunks.push(documentItems.slice(i, i + CHUNK_SIZE));\r\n    }\r\n\r\n    return {\r\n      chunks,\r\n      totalChunks: chunks.length,\r\n      totalItems: documentItems.length,\r\n      originalData: sheetData,\r\n      mappings: columnMappings,\r\n      // Special field to indicate this is document data\r\n      isDocumentPayload: true,\r\n      documents: documentItems,\r\n    };\r\n  } else {\r\n    // KEEP EXISTING CODE FOR PHYSICAL PRODUCTS (operations 1, 2, 4)\r\n    console.log(\r\n      \"Processing physical product data with operation type:\",\r\n      operationType\r\n    );\r\n\r\n    const attributeGroupMap = {};\r\n    if (Array.isArray(mappedData)) {\r\n      mappedData.forEach((option) => {\r\n        attributeGroupMap[option.backendName] = option.group || \"System\";\r\n        if (option.fullName) {\r\n          attributeGroupMap[`fullName:${option.backendName}`] = option.fullName;\r\n        }\r\n        console.log(\r\n          `Mapping ${option.backendName} to group ${option.group || \"System\"}`\r\n        );\r\n      });\r\n    }\r\n\r\n    // The rest of your existing code for physical products...\r\n    const getPathForAttribute = (backendName, columnName) => {\r\n      if (operationType === \"1\" && backendName === \"title\") {\r\n        console.log(\"Operation type 1: title placed inside attributes\");\r\n        return \"attributes.title\";\r\n      }\r\n\r\n      if (\r\n        backendName === \"type\" ||\r\n        backendName === \"classificationType\" ||\r\n        backendName === \"collabspaceTitle\"\r\n      ) {\r\n        if (backendName === \"collabspaceTitle\") {\r\n          console.log(\"collabspaceTitle mapped to root collabspace\");\r\n          return \"collabspaceTitle\";\r\n        }\r\n\r\n        console.log(`${backendName} placed at root level`);\r\n        return backendName;\r\n      }\r\n\r\n      if (\r\n        columnName === \"EIN Number\" ||\r\n        backendName === \"PartNumber\" ||\r\n        backendName === \"Part Number\"\r\n      ) {\r\n        console.log(\r\n          \"EIN Number mapped to attributes.dseng:EnterpriseReference.partNumber\"\r\n        );\r\n        return \"attributes.dseng:EnterpriseReference.partNumber\";\r\n      }\r\n\r\n      if (backendName === \"description\") {\r\n        console.log(\"Description mapped to attributes.description\");\r\n        return \"attributes.description\";\r\n      }\r\n\r\n      const group = attributeGroupMap[backendName];\r\n      console.log(`Attribute: ${backendName}, Group: ${group || \"unknown\"}`);\r\n\r\n      if (!group) {\r\n        console.log(`Skipping attribute with unknown group: ${backendName}`);\r\n        return null;\r\n      }\r\n\r\n      if (group === \"System Attributes\") {\r\n        return `attributes.${backendName}`;\r\n      } else {\r\n        return `attributes.dseno:EnterpriseAttributes.${backendName}`;\r\n      }\r\n    };\r\n\r\n    const transformedItems = sheetData.map((row) => {\r\n      const transformedRow = {};\r\n\r\n      Object.entries(row).forEach(([columnName, value]) => {\r\n        if (!columnMappings[columnName]) return;\r\n\r\n        const uiLabelBackendName = columnMappings[columnName];\r\n\r\n        const systemAttributeMappings = {\r\n          Title: \"title\",\r\n          Description: \"description\",\r\n          \"Collaborative Space\": \"collabspaceTitle\",\r\n          \"Collab Space\": \"collabspaceTitle\",\r\n          Type: \"Classification Type\",\r\n        };\r\n\r\n        const backendName =\r\n          systemAttributeMappings[uiLabelBackendName] ||\r\n          mappedData.find((attr) => attr.uiLabel === uiLabelBackendName)\r\n            ?.backendName ||\r\n          uiLabelBackendName;\r\n\r\n        const path = getPathForAttribute(backendName, columnName);\r\n\r\n        if (\r\n          backendName === \"title\" ||\r\n          backendName === \"description\" ||\r\n          backendName.toLowerCase() === \"collabspace\"\r\n        ) {\r\n          console.log(`Placing ${backendName} at path: ${path}`);\r\n        }\r\n\r\n        if (!path) return;\r\n\r\n        const pathParts = path.split(\".\");\r\n        let current = transformedRow;\r\n\r\n        for (let i = 0; i < pathParts.length - 1; i++) {\r\n          const part = pathParts[i];\r\n          if (!current[part]) {\r\n            current[part] = {};\r\n          }\r\n          current = current[part];\r\n        }\r\n\r\n        current[pathParts[pathParts.length - 1]] = value;\r\n      });\r\n\r\n      if (operationType === \"1\") {\r\n        const productTypeColumn = Object.keys(row).find(\r\n          (key) =>\r\n            key.toLowerCase().includes(\"physical product\") ||\r\n            key.toLowerCase().includes(\"raw material\")\r\n        );\r\n\r\n        if (productTypeColumn && row[productTypeColumn]) {\r\n          const productType = row[productTypeColumn].toLowerCase().trim();\r\n          transformedRow[\"Classification Type\"] = productType.includes(\r\n            \"physical product\"\r\n          )\r\n            ? \"VPMReference\"\r\n            : productType.includes(\"raw material\")\r\n            ? \"Raw_Material\"\r\n            : \"\";\r\n\r\n          console.log(\r\n            `Product type determined: ${transformedRow[\"Classification Type\"]} from value: ${row[productTypeColumn]}`\r\n          );\r\n        }\r\n      }\r\n\r\n      return transformedRow;\r\n    });\r\n\r\n    if (transformedItems.length > 0) {\r\n      console.log(\r\n        \"Sample transformed item structure:\",\r\n        JSON.stringify(transformedItems[0], null, 2)\r\n      );\r\n    }\r\n\r\n    const CHUNK_SIZE = 1000;\r\n    const chunks = [];\r\n\r\n    for (let i = 0; i < transformedItems.length; i += CHUNK_SIZE) {\r\n      chunks.push(transformedItems.slice(i, i + CHUNK_SIZE));\r\n    }\r\n\r\n    return {\r\n      chunks,\r\n      totalChunks: chunks.length,\r\n      totalItems: transformedItems.length,\r\n      originalData: sheetData,\r\n      mappings: columnMappings,\r\n      isDocumentPayload: false,\r\n    };\r\n  }\r\n};\r\n\r\nconst generateColumnMappings = (\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  mappedAttributes\r\n) => {\r\n  const { allNLSValues = [], dropdownOptions = [] } = mappedAttributes || {};\r\n  const completeMappings = {};\r\n  const simplifiedMappings = {};\r\n\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) return false;\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    return allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n  };\r\n\r\n  const systemAttributeMappings = {\r\n    Title: \"title\",\r\n    Description: \"description\",\r\n    \"Collaborative Space\": \"collabspaceTitle\",\r\n    \"Collab Space\": \"collabspaceTitle\",\r\n    Type: \"Classification Type\",\r\n    \"EIN Number\": \"Part Number\",\r\n  };\r\n\r\n  const getBackendNameForHeader = (header) => {\r\n    if (systemAttributeMappings[header]) {\r\n      return systemAttributeMappings[header];\r\n    }\r\n\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n\r\n    const systemAttrKey = Object.keys(systemAttributeMappings).find(\r\n      (key) => key.toLowerCase() === normalizedHeader\r\n    );\r\n\r\n    if (systemAttrKey) {\r\n      return systemAttributeMappings[systemAttrKey];\r\n    }\r\n\r\n    const matchingOption = dropdownOptions.find(\r\n      (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    return matchingOption ? matchingOption.backendName : header;\r\n  };\r\n\r\n  const specialMappings = {\r\n    \"EIN Number\": \"PartNumber\",\r\n  };\r\n\r\n  columnHeaders.forEach((columnName) => {\r\n    const hasNLS = hasMatchingNLS(columnName);\r\n    const isSpecialColumn = specialMappings[columnName];\r\n    const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n    if (isSpecialColumn) {\r\n      const mappedAttribute = specialMappings[columnName];\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory || false,\r\n        autoMapped: true,\r\n        isSpecial: true,\r\n      };\r\n\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    } else if (hasNLS || isMandatory) {\r\n      const mappedAttribute = getBackendNameForHeader(columnName);\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory,\r\n        autoMapped: true,\r\n      };\r\n\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    }\r\n  });\r\n\r\n  return {\r\n    completeMappings,\r\n    simplifiedMappings,\r\n    totalColumns: Object.keys(completeMappings).length,\r\n  };\r\n};\r\n\r\nconst MassUpload = () => {\r\n  const [collabTitles, setCollabTitles] = useState([]);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [errorModalShow, setErrorModalShow] = useState(false);\r\n  const [showContentErrors, setShowContentErrors] = useState(false);\r\n  const [showSpreadsheetModal, setShowSpreadsheetModal] = useState(false);\r\n  const [showTableModal, setShowTableModal] = useState(false);\r\n  const [responseData, setResponseData] = useState([{\r\n      name: \"Amit-DOC-0000001-32\",\r\n      revision: \"0\",\r\n      status: \"Success\",\r\n      message: \"Document updated successfully\"\r\n    }\r\n  ]);\r\n  const { showErrorToast, showSuccessToast } = useToast();\r\n  const [isValidating, setIsValidating] = useState(false);\r\n  const [operationChoice, setOperationChoice] = useState(\"\");\r\n  const [errors, setErrors] = useState([]);\r\n  const [columnHeaders, setColumnHeaders] = useState([]);\r\n  const [mandatoryAttributes, setMandatoryAttributes] = useState([]);\r\n  const fileUploaderRef = useRef();\r\n  const [formattedData, setFormattedData] = useState(null);\r\n  const [userDetails, setUserDetails] = useState(null);\r\n  const [securityContext, setSecurityContext] = useState(null); // New state for security context\r\n\r\n  const { initializeDroppableArea, loading } = useDroppableArea();\r\nconst tableKey = useRef(0); // ✅ Use useRef instead of useState\r\n\r\n    const hasInitializedDroppable = useRef(false);\r\n    useEffect(() => {\r\n      if (!hasInitializedDroppable.current) {\r\n        // console.log(\"[RevisionFloat] 🔄 Initializing droppable area...\");\r\n        initializeDroppableArea();\r\n        hasInitializedDroppable.current = true; // ✅ Ensure it runs only once\r\n      }\r\n    }, [initializeDroppableArea]);\r\n\r\n\r\n    const optimizedTableData = useMemo(() => getTableData(), []);\r\n\r\n  // ✅ Prevent unnecessary re-renders by checking for data changes\r\n  useEffect(() => {\r\n    if (optimizedTableData.length > 0) {\r\n      console.log(\r\n        \"[RevisionFloat] 📊 optimizedTableData Updated:\",\r\n        optimizedTableData\r\n      );\r\n    }\r\n  }, [optimizedTableData]);\r\n\r\n\r\n  const {\r\n    mappedAttributes: productMappedAttributes,\r\n    refreshMapping: refreshProductMapping,\r\n  } = useMassUpload();\r\n  const {\r\n    mappedAttributes: documentMappedAttributes,\r\n    refreshMapping: refreshDocumentMapping,\r\n  } = useFetchDocumentData(operationChoice);\r\n\r\n  const getActiveData = () => {\r\n    console.log(\"Getting active data for operation:\", operationChoice);\r\n\r\n    switch (operationChoice) {\r\n      case \"1\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      case \"2\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      case \"3\":\r\n        return {\r\n          mappedAttributes: documentMappedAttributes,\r\n          refreshMapping: refreshDocumentMapping,\r\n        };\r\n      case \"4\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      default:\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n    }\r\n  };\r\n\r\n  const { mappedAttributes, refreshMapping } = getActiveData();\r\n\r\n  console.log(\"Active operation:\", operationChoice);\r\n  console.log(\"Active mappedAttributes:\", mappedAttributes);\r\n\r\n  const handleRefreshForCurrentOperation = async (operation) => {\r\n    try {\r\n      console.log(\"Refreshing data for operation:\", operation);\r\n      const { refreshMapping } = getActiveData();\r\n      await refreshMapping(operation);\r\n    } catch (error) {\r\n      console.error(\"Error refreshing data:\", error);\r\n    }\r\n  };\r\n\r\n  const handleOperationChange = (value) => {\r\n    console.log(\"Operation selected:\", value);\r\n    setOperationChoice(value);\r\n    handleRefreshForCurrentOperation(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\r\n      \"[MassUpload.jsx] Global collabSpaceTitles:\",\r\n      globalCollabSpaceTitles\r\n    );\r\n    if (Array.isArray(globalCollabSpaceTitles)) {\r\n      setCollabTitles([...globalCollabSpaceTitles]);\r\n    } else {\r\n      console.error(\r\n        \"[MassUpload.jsx] ❌ globalCollabSpaceTitles is not an array!\",\r\n        globalCollabSpaceTitles\r\n      );\r\n    }\r\n    console.log(\"[MassUpload.jsx] Retrieved collabSpaceTitles:\", collabTitles);\r\n  }, []);\r\n\r\n  // Add this after the existing console.log\r\n  // console.log(\"getUserDetails function\", getUserDetails);\r\n\r\n  // Add this code to actually call the function and show its response\r\n  useEffect(() => {\r\n    async function fetchUserDetails() {\r\n      try {\r\n        console.log(\"Calling getUserDetails...\");\r\n        const userData = await getUserDetails();\r\n        console.log(\" User Details Response:\", userData);\r\n        // Add this line to store the user data\r\n        setUserDetails(userData);\r\n      } catch (error) {\r\n        console.error(\"Error fetching user details:\", error);\r\n      }\r\n    }\r\n\r\n    fetchUserDetails();\r\n  }, []);\r\n  // console.log(\"widget window\", window.widget);\r\n  // Add an effect to get and set the security context\r\n  useEffect(() => {\r\n    try {\r\n      // Get security context from widget\r\n      if (window.widget && typeof window.widget.getValue === \"function\") {\r\n        const securityContextValue = window.widget.getValue(\"Credentials\");\r\n        console.log(\"Security Context:\", securityContextValue);\r\n        setSecurityContext(securityContextValue);\r\n      } else {\r\n        console.warn(\"window.widget or getValue function not available\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error getting security context:\", error);\r\n    }\r\n  }, []);\r\n\r\n  const handleFileUpload = async (files) => {\r\n    if (files.length === 0) return;\r\n\r\n    try {\r\n      setIsValidating(true);\r\n      console.log(\"Starting file validation...\");\r\n      console.log(\"Selected Operation:\", operationChoice);\r\n      console.log(\"File:\", files[0].name);\r\n\r\n      const validationResult = await validateFile(\r\n        files[0],\r\n        collabTitles,\r\n        operationChoice\r\n      );\r\n\r\n      const {\r\n        headers = [],\r\n        validationErrors = [],\r\n        mandatoryAttributes = [],\r\n        sheetData = [],\r\n      } = validationResult;\r\n\r\n      setColumnHeaders(headers);\r\n      setMandatoryAttributes(mandatoryAttributes);\r\n\r\n      if (sheetData.length > 0) {\r\n        console.log(\"Sheet Data \", sheetData);\r\n        setFormattedData({ originalData: sheetData });\r\n\r\n        await handleRefreshForCurrentOperation(operationChoice);\r\n\r\n        setTimeout(() => {\r\n          console.log(\r\n            \"Applying automatic column mapping with:\",\r\n            mappedAttributes\r\n          );\r\n          if (mappedAttributes && Object.keys(mappedAttributes).length > 0) {\r\n            const { simplifiedMappings } = generateColumnMappings(\r\n              headers,\r\n              mandatoryAttributes,\r\n              mappedAttributes\r\n            );\r\n\r\n            console.log(\"Auto-generated mappings:\", simplifiedMappings);\r\n\r\n            if (Object.keys(simplifiedMappings).length > 0) {\r\n              const transformedData = transformSheetDataWithMappings(\r\n                sheetData,\r\n                simplifiedMappings,\r\n                operationChoice,\r\n                mappedAttributes\r\n              );\r\n\r\n              setFormattedData(transformedData);\r\n              showSuccessToast(\r\n                `Data automatically mapped with ${\r\n                  Object.keys(simplifiedMappings).length\r\n                } columns`\r\n              );\r\n            }\r\n          }\r\n        }, 500);\r\n      }\r\n\r\n      if (validationErrors.length === 0) {\r\n        setErrors([]);\r\n        showSuccessToast(\"File validated successfully!\");\r\n      } else {\r\n        setErrors(validationErrors);\r\n        setErrorModalShow(true);\r\n      }\r\n    } catch (errorResponse) {\r\n      console.error(\"Validation failed:\", errorResponse);\r\n\r\n      const {\r\n        errors: responseErrors = [\"Unknown validation error.\"],\r\n        headers: responseHeaders = [],\r\n        mandatoryAttributes: responseMandatoryAttributes = [],\r\n        isTemplateMismatch = false,\r\n      } = errorResponse;\r\n\r\n      if (isTemplateMismatch) {\r\n        showErrorToast(\r\n          \"The template uploaded and the selected operation do not match\"\r\n        );\r\n        handleReset(true);\r\n        if (fileUploaderRef.current) {\r\n          fileUploaderRef.current.handleClearFiles();\r\n        }\r\n        return;\r\n      }\r\n\r\n      setErrors(responseErrors);\r\n      setColumnHeaders(responseHeaders);\r\n      setMandatoryAttributes(responseMandatoryAttributes);\r\n      setErrorModalShow(true);\r\n    } finally {\r\n      setIsValidating(false);\r\n    }\r\n  };\r\n\r\n  const handleDownloadTemplate = () => {\r\n    downloadTemplate(showErrorToast)(operationChoice);\r\n  };\r\n\r\n  const handleReset = (skipSuccessToast = false) => {\r\n    setModalShow(false);\r\n    setErrorModalShow(false);\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(false);\r\n    setIsValidating(false);\r\n    setOperationChoice(\"\");\r\n    setErrors([]);\r\n    setColumnHeaders([]);\r\n    setMandatoryAttributes([]);\r\n    setFormattedData(null);\r\n\r\n    const selectElement = document.querySelector(\r\n      'select[aria-label=\"Choose Operations\"]'\r\n    );\r\n    if (selectElement) {\r\n      selectElement.value = \"\";\r\n    }\r\n\r\n    if (!skipSuccessToast) {\r\n      showSuccessToast(\"Widget reset successfully!\");\r\n    }\r\n  };\r\n\r\n  const handleOpenSpreadsheetModal = () => {\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(true);\r\n  };\r\n\r\n  const submitDisabled = columnHeaders.length === 0 || errors.length > 0;\r\n  const manageSpreadsheetDisabled = columnHeaders.length === 0;\r\n\r\n  const handleConfirmSubmit = async () => {\r\n    try {\r\n      if (!formattedData) {\r\n        showErrorToast(\"No data to submit\");\r\n        return;\r\n      }\r\n\r\n      const endpoint = API_ENDPOINTS[operationChoice];\r\n      if (!endpoint) {\r\n        showErrorToast(\"Invalid operation type\");\r\n        return;\r\n      }\r\n\r\n      const { chunks, totalChunks, isDocumentPayload, documents } =\r\n        formattedData;\r\n      let successCount = 0;\r\n      let failureCount = 0;\r\n\r\n      showSuccessToast(`Starting upload of ${totalChunks} chunks...`);\r\n\r\n      // For document payload, use the specific structure\r\n      if (operationChoice === \"3\" && isDocumentPayload) {\r\n        try {\r\n          // Create document-specific chunks if needed\r\n          const docChunks = [];\r\n          for (let i = 0; i < documents.length; i += 1000) {\r\n            docChunks.push(documents.slice(i, i + 1000));\r\n          }\r\n\r\n          // Create user details object once - now with security context\r\n          const userInfo = {\r\n            ...(userDetails?.email ? { email: userDetails.email } : {}),\r\n            ...(userDetails?.login ? { userId: userDetails.login } : {}),\r\n            ...(securityContext ? { securityContext: securityContext } : {}),\r\n          };\r\n\r\n          console.log(\r\n            \"Adding user information to document API payload:\",\r\n            userInfo\r\n          );\r\n\r\n          for (let i = 0; i < docChunks.length; i++) {\r\n            // Include user details at the payload root level, not in each document\r\n            const response = await api.post(endpoint, {\r\n              ...userInfo, // Spread user info at root level\r\n              documents: docChunks[i],\r\n            });\r\n\r\n            if (response.status === 200) {\r\n              successCount++;\r\n              if (i % 5 === 0) {\r\n                showSuccessToast(\r\n                  `Processed ${i + 1} of ${docChunks.length} document chunks...`\r\n                );\r\n              }\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Document upload failed:\", error);\r\n          failureCount++;\r\n        }\r\n      } else {\r\n        // For other operations (physical products)\r\n\r\n        // Create user details object once - now with security context\r\n        const userInfo =\r\n          operationChoice === \"1\"\r\n            ? {\r\n                ...(userDetails?.email ? { email: userDetails.email } : {}),\r\n                ...(userDetails?.login ? { userId: userDetails.login } : {}),\r\n                ...(securityContext\r\n                  ? { securityContext: securityContext }\r\n                  : {}),\r\n              }\r\n            : {};\r\n\r\n        if (operationChoice === \"1\") {\r\n          console.log(\r\n            \"Adding user and security information to payload root level:\",\r\n            userInfo\r\n          );\r\n        }\r\n\r\n        if (operationChoice === \"1\") {\r\n          console.log(\r\n            \"Adding user information to payload root level:\",\r\n            userInfo\r\n          );\r\n        }\r\n\r\n        // Use enhancedChunks instead of chunks for the API request\r\n        for (let i = 0; i < chunks.length; i++) {\r\n          try {\r\n            const chunk = chunks[i];\r\n            // Include user details at the payload root level, not in each item\r\n            const response = await api.post(endpoint, {\r\n              ...userInfo, // Spread user info at root level\r\n              items: chunk,\r\n            });\r\n\r\n            if (response.status === 200) {\r\n              successCount++;\r\n              if (i % 5 === 0) {\r\n                showSuccessToast(\r\n                  `Processed ${i + 1} of ${totalChunks} chunks...`\r\n                );\r\n              }\r\n            }\r\n          } catch (error) {\r\n            console.error(`Chunk ${i + 1} failed:`, error);\r\n            failureCount++;\r\n          }\r\n        }\r\n      }\r\n\r\n      const finalMessage = `Upload complete: ${successCount} chunks successful, ${failureCount} failed`;\r\n      setShowTableModal(true);\r\n      if (failureCount > 0) {\r\n        showErrorToast(finalMessage);\r\n      } else {\r\n        showSuccessToast(\"Upload successful!\");\r\n        setModalShow(false);\r\n        handleReset();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Upload error:\", error);\r\n      showErrorToast(`Upload failed: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  console.log(\"Errors in Massupload.jsx:\", errors);\r\n\r\n  const isFileUploadDisabled = !operationChoice;\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container-fluid d-flex justify-content-center\"\r\n        style={{ minHeight: \"100vh\" }}\r\n      >\r\n        <div\r\n          className=\"w-100\"\r\n          style={{ maxWidth: \"1200px\", maxHeight: \"500px\" }}\r\n        >\r\n          <Stack className=\"mt-3\" gap={4}>\r\n            <Stack direction=\"horizontal\">\r\n              <CustomSelect\r\n                selectedValue={operationChoice}\r\n                onChange={handleOperationChange}\r\n                size=\"lg\"\r\n                className=\"w-50\"\r\n                options={{\r\n                  defaultLabel: \"Choose Operations\",\r\n                  list: [\r\n                    { value: \"1\", label: \"Physical Product/Raw Material\" },\r\n                    { value: \"2\", label: \"Physical Product Structure\" },\r\n                    { value: \"3\", label: \"Document\" },\r\n                    { value: \"4\", label: \"Physical Product-Document\" },\r\n                  ],\r\n                }}\r\n              />\r\n              <div className=\"ms-auto\">\r\n                <CustomButton\r\n                  variant=\"link\"\r\n                  size=\"lg\"\r\n                  onClick={handleDownloadTemplate}\r\n                  text=\"Download Template\"\r\n                />\r\n              </div>\r\n            </Stack>\r\n\r\n            <div className={isFileUploadDisabled ? \"opacity-50\" : \"\"}>\r\n              <FileUpload\r\n                ref={fileUploaderRef}\r\n                fileTypes={[\"XLSX\"]}\r\n                multiple={false}\r\n                onUpload={handleFileUpload}\r\n                onReset={handleReset}\r\n                disabled={isFileUploadDisabled}\r\n                message={\r\n                  isFileUploadDisabled\r\n                    ? \"Please select an operation first\"\r\n                    : \"Drag & Drop your files here or Click to browse\"\r\n                }\r\n              />\r\n            </div>\r\n\r\n            {isValidating && <Loader />}\r\n\r\n            <Stack direction=\"horizontal\" gap={2}>\r\n              <div className=\"ms-auto d-flex gap-5\">\r\n                {errors.length > 0 && (\r\n                  <CustomButton\r\n                    variant=\"danger\"\r\n                    onClick={() => setShowContentErrors(true)}\r\n                    text={`Content Errors (${errors.length})`}\r\n                  />\r\n                )}\r\n\r\n                <CustomButton\r\n                  variant={manageSpreadsheetDisabled ? \"secondary\" : \"info\"}\r\n                  onClick={handleOpenSpreadsheetModal}\r\n                  text=\"Manage Spreadsheet Columns\"\r\n                  disabled={manageSpreadsheetDisabled}\r\n                />\r\n\r\n                <CustomButton\r\n                  variant=\"outline-primary\"\r\n                  onClick={() => setShowTableModal(true)}\r\n                  text=\"Preview Table\"\r\n                />\r\n\r\n                <CustomButton\r\n                  variant={submitDisabled ? \"secondary\" : \"primary\"}\r\n                  disabled={submitDisabled}\r\n                  size=\"lg\"\r\n                  onClick={() => setModalShow(true)}\r\n                  text=\"Submit\"\r\n                />\r\n              </div>\r\n            </Stack>\r\n          </Stack>\r\n        </div>\r\n      </div>\r\n\r\n      <ContentErrorsModal\r\n        show={showContentErrors}\r\n        onHide={() => setShowContentErrors(false)}\r\n        errors={errors}\r\n      />\r\n\r\n      <ConfirmationModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        onConfirm={handleConfirmSubmit}\r\n      />\r\n\r\n      <ColumnMappingModal\r\n        show={showSpreadsheetModal}\r\n        onHide={() => setShowSpreadsheetModal(false)}\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n        existingMappings={formattedData?.mappings ? formattedData.mappings : {}}\r\n        dropdownOptions={mappedAttributes?.dropdownOptions}\r\n        allNLSValues={mappedAttributes?.allNLSValues}\r\n        operationChoice={operationChoice}\r\n        onColumnsMapped={(mappings, finalMapping) => {\r\n          console.log(\"Column mappings received:\", mappings);\r\n\r\n          const columnMappings = mappings;\r\n\r\n          if (formattedData && formattedData.originalData) {\r\n            const transformedData = transformSheetDataWithMappings(\r\n              formattedData.originalData,\r\n              columnMappings,\r\n              operationChoice,\r\n              mappedAttributes\r\n            );\r\n\r\n            setFormattedData(transformedData);\r\n            showSuccessToast(\r\n              `Data mapped successfully with ${\r\n                Object.keys(mappings).length\r\n              } columns`\r\n            );\r\n          } else {\r\n            showErrorToast(\r\n              \"No sheet data available to transform with mappings\"\r\n            );\r\n          }\r\n        }}\r\n      />\r\n      <TableModal\r\n          show={showTableModal}\r\n          onHide={() => setShowTableModal(false)}\r\n          data={optimizedTableData}\r\n          columns={tableColumns}\r\n        />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MassUpload;\r\n","import { loadPlatformAPI } from \"./helpers\";\r\n\r\nexport default async function getUserDetails() {\r\n  try {\r\n    const PlatformAPI = await loadPlatformAPI();\r\n    const user = await PlatformAPI.getUser();\r\n    // console.log(\" User details retrieved successfully:\", user);\r\n    // console.log(\"User ID:\", user?.id);\r\n    // console.log(\"User name:\", user?.name);\r\n    // console.log(\"User email:\", user?.email);\r\n    // console.log(\"User roles:\", user?.roles);\r\n    // console.log(\"User preferences:\", user?.preferences);\r\n\r\n    return user;\r\n  } catch (error) {\r\n    console.error(\" Error getting user details:\", error);\r\n    return null; // Or throw the error, depending on how you want to handle it\r\n  }\r\n}\r\n","import { MSG_DROPDOWN_NOT_SELECTED } from \"./toastMessages\";\r\n\r\nexport const downloadTemplate = (showErrorToast) => (operationChoice) => {\r\n  let url = \"\";\r\n  switch (operationChoice) {\r\n    case \"1\": // Physical Product/Raw Material\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"2\": // Physical Product Structure\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductStructureSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"3\": // Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"4\": // Physical Product-Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProduct-DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    default:\r\n      showErrorToast(MSG_DROPDOWN_NOT_SELECTED);\r\n      return;\r\n  }\r\n  window.open(url, \"_blank\");\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./styles/variables.css\";\r\nimport MassUpload from \"./pages/mass-upload/massUpload\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n    \r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <MassUpload />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n"],"names":["_ref","show","onHide","title","children","footerButtons","_jsxs","Modal","size","centered","_jsx","Header","closeButton","Title","Body","Footer","map","btn","index","Button","variant","onClick","label","forwardRef","ref","fileTypes","multiple","onUpload","onReset","disabled","message","files","setFiles","useState","showErrorToast","useToast","useImperativeHandle","handleClearFiles","skipSuccessToast","arguments","length","undefined","handleClearFile","current","className","concat","FileUploader","handleChange","selectedFiles","fileArray","name","types","hoverTitle","file","style","display","alignItems","background","border","cursor","color","opacity","validateFile","collabSpaceTitles","selectedOperation","Promise","resolve","reject","_config$MassUpload$ma","_config$MassUpload$ma2","console","log","operation","fileName","matchedOperation","expectedHeaders","config","fileHeaders","mandatoryAttributes","errors","headers","Array","isArray","error","reader","FileReader","readAsBinaryString","onload","async","workbook","XLSX","e","target","result","type","dense","cellDates","cellNF","cellText","sheetName","SheetNames","worksheet","Sheets","uploadedHeaders","sheet_to_json","header","every","includes","isTemplateMismatch","allSheetData","defval","chunks","data","chunkSize","i","push","slice","processDataInChunks","validationErrors","invalidPrefixes","errorStats","mandatory","collabSpace","einPrefix","docPrefix","lowerCaseCollabSpaceTitles","toLowerCase","chunkIndex","chunk","progress","Math","round","forEach","row","indexInChunk","globalRowIndex","field","toString","trim","_row$CollaborativeSp","userCollabSpace","firstRow","levelValue","levelStr","String","Number","valueToValidate","columnName","_row$columnName","some","prefix","startsWith","_row$columnName2","_row$columnName3","quantityValue","numQuantity","isNaN","processedRows","totalRows","currentErrors","collaborativeSpace","documentPrefix","total","byType","sheetData","onerror","selectedValue","onChange","options","defaultLabel","list","hasGroupedOptions","Form","Select","value","group","groupIndex","item","optionIndex","idx","Alert","processedErrors","useMemo","errorGroups","reduce","groups","rowMatch","match","columnMatch","errorMsg","split","join","rowNumber","columns","Object","values","sort","a","b","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","parent","CellMeasurer","columnIndex","rowIndex","width","column","err","ReusableAlert","_Fragment","AutoSizer","_ref3","height","List","rowCount","rowHeight","deferredMeasurementCache","CustomModal","ErrorPopup","onConfirm","columnHeaders","handleSelectChange","dropdownOptions","Table","bordered","currentMapping","filteredOptions","CustomSelect","uiLabel","selectedMappings","setSelectedMappings","allNLSValues","operationChoice","StaticTable","hasNLS","warn","normalizedHeader","hasMatch","nls","hasMatchingNLS","isMandatory","columnHeader","backendName","option","find","opt","getBackendNameForUILabel","prev","_objectSpread","mappedAttribute","currentColumnHeader","selectedValues","entries","filter","_","mapping","groupedOptions","ebomAttributes","attr","partAttributes","prepareDropdownOptions","onColumnsMapped","existingMappings","useEffect","keys","errorMessage","handleOkClick","completeMappings","simplifiedMappings","specialMappings","userMapping","autoMapped","existingMapping","isSpecialColumn","matchingOption","getBackendNameForHeader","finalMapping","columnMappings","totalColumns","groupEnd","MappedList","ReusableTable","CheckmarkCell","FontAwesomeIcon","icon","faCheck","CrossmarkCell","faXmark","tableColumns","accessorKey","columnPinning","cell","getValue","initialOperationChoice","mappedAttributes","setMappedAttributes","setOperationChoice","ENOVIA_BASE_URL","process","fetchColumnMapping","_metadataResponse$out","_metadataResponse$out2","_metadataResponse$out3","_attributeResponse$ou","_attributeResponse$ou2","effectiveOperation","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","metadataResponse","callEnoviaWebService","output","Error","member","objectId","id","attributeResponse","busIDs","groupData","results","systemAttributes","groupNLS","attributeGroups","apiNlsValues","systemNlsValues","ebomNlsValues","Set","filteredGroupData","mergeAttributes","relevantAttributes","deploymentExtension","mappedData","attributesByGroup","refreshMapping","initialOperationType","documentData","setDocumentData","operationType","setOperationType","API_URL","fetchDocumentData","_documentInfo$attribu","body","preferedType","typeName","subTypes","runUXBL","metrics","UXName","client_app_domain","client_app_name","response","status","documentInfo","JSON","stringify","extensionAttributes","attributes","DocumentsAttributes","hardcodedNlsValues","apiOptions","fullName","nameParts","extractedName","hardcodedOptions","combinedMappedData","API_ENDPOINTS","transformSheetDataWithMappings","mappedAttributesData","documentItems","rootData","dataelements","apiAttributes","backendFieldName","attribute","CHUNK_SIZE","totalChunks","totalItems","originalData","mappings","isDocumentPayload","documents","attributeGroupMap","getPathForAttribute","transformedItems","transformedRow","_mappedData$find","uiLabelBackendName","Description","Type","path","pathParts","part","productTypeColumn","productType","generateColumnMappings","systemAttributeMappings","isSpecial","systemAttrKey","MassUpload","collabTitles","setCollabTitles","modalShow","setModalShow","errorModalShow","setErrorModalShow","showContentErrors","setShowContentErrors","showSpreadsheetModal","setShowSpreadsheetModal","showTableModal","setShowTableModal","responseData","setResponseData","revision","showSuccessToast","isValidating","setIsValidating","setErrors","setColumnHeaders","setMandatoryAttributes","fileUploaderRef","useRef","formattedData","setFormattedData","userDetails","setUserDetails","securityContext","setSecurityContext","initializeDroppableArea","loading","useDroppableArea","hasInitializedDroppable","optimizedTableData","EIN","Revision","State","Owner","Collabspace","relationship","productMappedAttributes","refreshProductMapping","useMassUpload","documentMappedAttributes","refreshDocumentMapping","useFetchDocumentData","getActiveData","handleRefreshForCurrentOperation","globalCollabSpaceTitles","userData","PlatformAPI","loadPlatformAPI","getUser","getUserDetails","fetchUserDetails","window","widget","securityContextValue","handleReset","selectElement","document","querySelector","submitDisabled","manageSpreadsheetDisabled","isFileUploadDisabled","minHeight","maxWidth","maxHeight","Stack","gap","direction","CustomButton","handleDownloadTemplate","url","MSG_DROPDOWN_NOT_SELECTED","open","downloadTemplate","text","FileUpload","validationResult","setTimeout","transformedData","errorResponse","responseErrors","responseHeaders","responseMandatoryAttributes","Loader","handleOpenSpreadsheetModal","ContentErrorsModal","ConfirmationModal","endpoint","successCount","failureCount","docChunks","userInfo","email","login","userId","api","post","items","finalMessage","ColumnMappingModal","TableModal","root","hasOnLoadRun","addEvent","_window$widget","_window$widget$body","requirejs","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","store","ToastContainer","start","securityContext1","WAFData","loadWAFData","csrfURL","authenticatedRequest","method","onComplete","onFailure","csrfToken","csrf","csrfValue","securityContextHeader"],"sourceRoot":""}